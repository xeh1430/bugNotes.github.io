<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>数据结构与算法(五)——递归</title>
      <link href="/text/dataStructure5.html"/>
      <url>/text/dataStructure5.html</url>
      
        <content type="html"><![CDATA[<h3 id="递归介绍"><a href="#递归介绍" class="headerlink" title="递归介绍"></a>递归介绍</h3><p><strong>递归（Recursion）</strong>：一种非常高效、简洁的编码技巧，一种应用非常广泛的算法，比如 DFS 度优先搜索、前中后序二叉树遍历、IDE 的单步跟踪功能等都是使用递归。</p><p>方法或函数调用自身的方式称为<strong>递归调用</strong>，调用称为递，返回称为归。</p><p>基本上，所有的递归问题都可以用递推公式来表示，比如<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="built_in">n</span>) = f(<span class="built_in">n</span>-<span class="number">1</span>) + <span class="number">1</span> ,f(<span class="number">1</span>)=<span class="number">1</span>;</span><br><span class="line">f(<span class="built_in">n</span>) = f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>);</span><br><span class="line">f(<span class="built_in">n</span>) = <span class="built_in">n</span>*f(<span class="built_in">n</span>-<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p><strong>优点</strong>：代码的表达力很强，写起来简洁。<br><strong>缺点</strong>：空间复杂度高、有堆栈溢出风险、存在重复计算、过多的函数调用会耗时较多等问题。</p><h3 id="使用递归的条件"><a href="#使用递归的条件" class="headerlink" title="使用递归的条件"></a>使用递归的条件</h3><p>1.问题的解可以分解为几个子问题（数据规模更小的问题）的解<br>2.问题与子问题，除了数据规模不同，求解思路完全一样<br>3.存在递归终止条件</p><h3 id="如何实现递归"><a href="#如何实现递归" class="headerlink" title="如何实现递归"></a>如何实现递归</h3><p><strong>递归代码编写</strong><br>写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。</p><p><strong>递归代码理解</strong><br>对于递归代码，若试图想清楚整个递和归的过程，实际上是进入了一个思维误区。</p><p>如果一个问题A可以分解为若干个子问题B、C、D，你可以假设子问题B、C、D已经解决。而且，你只需要思考问题A与子问题B、C、D两层之间的关系即可，不需要一层层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。</p><p>因此，理解递归代码，就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。</p><h3 id="递归常见问题及解决方案"><a href="#递归常见问题及解决方案" class="headerlink" title="递归常见问题及解决方案"></a>递归常见问题及解决方案</h3><p><strong>警惕堆栈溢出</strong><br>可以声明一个全局变量来控制递归的深度，从而避免堆栈溢出。</p><p><strong>警惕重复计算</strong><br>通过某种数据结构来保存已经求解过的值，从而避免重复计算。</p><h3 id="将递归改写为非递归代码"><a href="#将递归改写为非递归代码" class="headerlink" title="将递归改写为非递归代码"></a>将递归改写为非递归代码</h3><p>所有的递归代码都可以改写为<strong>迭代循环</strong>的非递归写法<br><strong>抽象</strong>出递推公式、初始值和边界条件，然后用迭代循环实现</p><h3 id="调试递归"><a href="#调试递归" class="headerlink" title="调试递归"></a>调试递归</h3><p><strong>打印日志发现，递归值</strong><br><strong>结合条件断点进行调试</strong></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="斐波拉契数列"><a href="#斐波拉契数列" class="headerlink" title="斐波拉契数列"></a>斐波拉契数列</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    斐波那契数列: 0、1、1、2、3、5、8</span></span><br><span class="line"><span class="comment">    可以这样理解 f0 = 0; f1 = 1; fn = f(n-1) + f(n - 2) （n &gt;= 2）</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求阶乘n"><a href="#求阶乘n" class="headerlink" title="求阶乘n"></a>求阶乘n</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> int doFactorial(int n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//传入的数据不合法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;<span class="comment">//递归结束的条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n*doFactorial(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>数据结构与算法(四)——队列</title>
      <link href="/text/dataStructure4.html"/>
      <url>/text/dataStructure4.html</url>
      
        <content type="html"><![CDATA[<p><strong>队列(Queue)：</strong>具有<strong>先进先出</strong>的特性，支持在队尾插入元素，在队头删除元素的特性。</p><p>队列是一种<strong>操作受限</strong>的线性表数据结构，包含两个操作，<strong>入队 enqueue()</strong>，放一个数据到队列尾部；<strong>出队 dequeue()</strong>，从队列头部取一个元素。</p><p>用数组实现的队列，我们叫作<strong>顺序队列</strong>，用链表实现的队列，我们叫作<strong>链式队列</strong>。</p><p><img src="https://xeh1430.github.io/img/queue.png" alt=""> </p><h3 id="队列的数组实现"><a href="#队列的数组实现" class="headerlink" title="队列的数组实现"></a>队列的数组实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用数组实现的队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 数组：items，数组大小：n</span></span><br><span class="line">  <span class="keyword">private</span> String[] items;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// head 表示队头下标，tail 表示队尾下标</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 申请一个大小为 capacity 的数组</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">items = <span class="keyword">new</span> String[capacity];</span><br><span class="line">n = capacity;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// 入队操作，将 item 放入队尾</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line"><span class="comment">// tail == n 表示队列末尾没有空间了</span></span><br><span class="line"><span class="keyword">if</span> (tail == n) &#123;</span><br><span class="line">  <span class="comment">// tail ==n &amp;&amp; head==0，表示整个队列都占满了</span></span><br><span class="line">  <span class="keyword">if</span> (head == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">// 数据搬移</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i &lt; tail; ++i) &#123;</span><br><span class="line">    items[i-head] = items[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 搬移完之后重新更新 head 和 tail</span></span><br><span class="line">  tail -= head;</span><br><span class="line">  head = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">items[tail] = item;</span><br><span class="line">++tail;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 出队</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如果 head == tail 表示队列为空</span></span><br><span class="line"><span class="keyword">if</span> (head == tail) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">String ret = items[head];</span><br><span class="line">++head;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列的链表实现"><a href="#队列的链表实现" class="headerlink" title="队列的链表实现"></a>队列的链表实现</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LinkedQueue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Node head = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> Node tail = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Node</span> &#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="keyword">value</span>;</span><br><span class="line">  Node next;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">value</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line"><span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> boolean <span class="title">enqueue</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">value</span></span>) </span>&#123;</span><br><span class="line">Node newNode = <span class="keyword">new</span> Node(<span class="keyword">value</span>);</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">head = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tail.next = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dequeue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node node = head.next;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">value</span> = node.<span class="keyword">value</span>;</span><br><span class="line">head = node;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>具有队头指针和队尾指针，指示队列元素所在的位置，避免删除元素时移动大量元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularQueue</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 数组：items，数组大小：n</span></span><br><span class="line">  <span class="keyword">private</span> String[] items;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// head 表示队头下标，tail 表示队尾下标</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> head = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 申请一个大小为 capacity 的数组</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CircularQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">items = <span class="keyword">new</span> String[capacity];</span><br><span class="line">n = capacity;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 入队</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 队列满了</span></span><br><span class="line"><span class="keyword">if</span> ((tail + <span class="number">1</span>) % n == head) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">items[tail] = item;</span><br><span class="line">tail = (tail + <span class="number">1</span>) % n;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="comment">// 如果 head == tail 表示队列为空</span></span><br><span class="line"><span class="keyword">if</span> (head == tail) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">String ret = items[head];</span><br><span class="line">head = (head + <span class="number">1</span>) % n;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>阻塞队列其实就是在队列基础上增加了阻塞操作。<br>在队列为空的时候，从队头取数据会被阻塞；队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。</p><h4 id="生产者-消费者模型"><a href="#生产者-消费者模型" class="headerlink" title="生产者 - 消费者模型"></a>生产者 - 消费者模型</h4><p>当“生产者”生产数据的速度过快，“消费者”来不及消费时，存储数据的队列很快就会满了。这个时候，生产者就阻塞等待，直到“消费者”消费了数据，“生产者”才会被唤醒继续“生产”。</p><h3 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h3><p>线程安全的队列我们叫作并发队列。</p><p>直接在 enqueue()、dequeue() 方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或者取操作基于数组的循环队列，利用 CAS 原子操作，可以实现非常高效的并发队列。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><strong>线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？</strong><br>两种处理策略;<br>第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求排队，等到有空闲线程时，取出排队的请求继续处理</p><p><strong>队列两种实现方式对于排队请求有什么区别呢？</strong><br>基于链表的实现方式，可以实现一个支持无限排队的无界队列（unbounded queue），但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间比较敏感的系统，基于链表实现的无限排队的线程池是不合适的。</p><p>而基于数组实现的有界队列（bounded queue），队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统来说，就相对更加合理。不过，设置一个合理的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源、发挥最大性能。</p><p><strong>对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>数据结构与算法(三)——栈</title>
      <link href="/text/dataStructure3.html"/>
      <url>/text/dataStructure3.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://xeh1430.github.io/img/stack.jpg" alt=""><br><strong>栈(Stack)：</strong>当某个数据集合只涉及在<strong>一端插入和删除数据</strong>，并且满足<strong>后进先出、先进后出</strong>的特性。</p><p>栈是一种<strong>操作受限</strong>的线性表数据结构，包含两个操作，<strong>入栈 push()</strong>和<strong>出栈 pop()</strong>，也就是在栈顶插入一个数据和从栈顶删除一个数据。</p><p>用数组实现的栈，我们叫作<strong>顺序栈</strong>，用链表实现的栈，我们叫作<strong>链式栈</strong>。</p><h3 id="栈的数组实现"><a href="#栈的数组实现" class="headerlink" title="栈的数组实现"></a>栈的数组实现</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于数组实现的顺序栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ArrayStack &#123;</span><br><span class="line">  <span class="keyword">private</span> String[] items; <span class="comment">// 数组</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">count</span>; <span class="comment">// 栈中元素个数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n; <span class="comment">// 栈的大小</span></span><br><span class="line">  <span class="comment">// 初始化数组，申请一个大小为 n 的数组空间</span></span><br><span class="line">  <span class="keyword">public</span> ArrayStack(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = <span class="keyword">new</span> String[n];</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 入栈操作</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="keyword">push</span>(String item) &#123;</span><br><span class="line">    <span class="comment">// 数组空间不够了，直接返回 false，入栈失败。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">count</span> == n) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 将 item 放到下标为 count 的位置，并且 count 加一</span></span><br><span class="line">    items[<span class="keyword">count</span>] = item;</span><br><span class="line">    ++<span class="keyword">count</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 出栈操作</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="keyword">pop</span>() &#123;</span><br><span class="line">    <span class="comment">// 栈为空，则直接返回 null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">count</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 返回下标为 count-1 的数组元素，并且栈中元素个数 count 减一</span></span><br><span class="line">    String tmp = items[<span class="keyword">count</span>-<span class="number">1</span>];</span><br><span class="line">    --<span class="keyword">count</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的链表实现"><a href="#栈的链表实现" class="headerlink" title="栈的链表实现"></a>栈的链表实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackOfLinked</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">//定义一个内部类，就可以直接使用类型参数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    Item item;</span><br><span class="line">    Node next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> Node first;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line">  <span class="comment">//构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StackOfLinked</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="comment">//添加</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">    Node oldfirst = first;</span><br><span class="line">    first = <span class="keyword">new</span> Node();</span><br><span class="line">    first.item = item;</span><br><span class="line">    first.next = oldfirst;</span><br><span class="line">    N++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//删除</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Item item = first.item;</span><br><span class="line">    first = first.next;</span><br><span class="line">    N--;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//是否为空</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//元素数量</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> N;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回栈中最近添加的元素而不删除它</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Item <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> first.item;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LinkedIterator();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//内部类：迭代器</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">LinkedIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = N;</span><br><span class="line">    Node t = first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> i &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Item item = (Item) t.item;</span><br><span class="line">      t = t.next;</span><br><span class="line">      i--;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h4><p>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构, 用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈</p><h4 id="栈在表达式求值中的应用"><a href="#栈在表达式求值中的应用" class="headerlink" title="栈在表达式求值中的应用"></a>栈在表达式求值中的应用</h4><p><strong>如：34+13*9+44-12/3</strong><br>两个栈对象，一个存操作数，一个存计算符，遇到运算符，就与运算符栈的栈顶元素进行比较，若比运算符栈顶元素优先级高，就将当前运算符压入栈，若比运算符栈顶元素的优先级低或者相同，从运算符栈中取出栈顶运算符，从操作数栈顶取出2个操作数，然后进行计算，把计算完的结果压入操作数栈，继续比较</p><h4 id="栈在括号匹配中的应用"><a href="#栈在括号匹配中的应用" class="headerlink" title="栈在括号匹配中的应用"></a>栈在括号匹配中的应用</h4><p><strong>如：{}{<a href="">()</a>}</strong><br>用栈保存为匹配的左括号，从左到右一次扫描字符串，当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号，如果能匹配上，则继续扫描剩下的字符串。如果扫描过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。</p><p>当所有的括号都扫描完成之后，如果栈为空，则说明字符串为合法格式；否则，说明未匹配的左括号为非法格式</p><h4 id="实现浏览器的前进后退功能"><a href="#实现浏览器的前进后退功能" class="headerlink" title="实现浏览器的前进后退功能"></a>实现浏览器的前进后退功能</h4><p>使用两个栈X和Y，我们把首次浏览的页面依次压如栈X，当点击后退按钮时，再依次从栈X中出栈，并将出栈的数据一次放入Y栈。当点击前进按钮时，我们依次从栈Y中取出数据，放入栈X中。当栈X中没有数据时，说明没有页面可以继续后退浏览了。当Y栈没有数据，那就说明没有页面可以点击前进浏览了</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>“耐性”不要太好</title>
      <link href="/text/feeling.html"/>
      <url>/text/feeling.html</url>
      
        <content type="html"><![CDATA[<p>前几天玩微信，发现了“浮窗”这个小功能，刚好解决了一个我很不爽的问题。</p><p>我看公众号文章比较多，经常有人发信息给我而我正在看公众号文章，那我就不得不退出去回复信息再点回来继续看，但这来回看文章又要好多个步骤，很麻烦，也很厌烦。“浮窗”功能是将公众号文章缩小成为浮窗，显示在界面上，然后我们可以任意切换其它的微信界面，点击浮窗直接查看文章，刚好解决了我的问题。具体的操作说明在这里就不说了。</p><p>可能我“耐性”真的好，硬是忍了这么久。要不是前几天无意间发现“浮窗”这个功能，我都不知道会持续到什么时候。</p><p>刚发现时还以为是新上线的功能呢，兴冲冲地跑去查了一下，结果这个功能去年5月份上线的，将近一年时间了。此时我才真正的反思自己。</p><p>功能上线快一年，还可以解释为对产品功能不关注，但我已经明显用得不爽了，却一直忍受着，为什么不去寻找解决方法呢？真的是“耐性”好吗？不是的，我觉察到了，但根本没有意识到要去改变它，这是一个非常不好的状况。警醒！</p><p>作为一个程序员，追求「极客精神」，这篇文章作为自己的一个警醒，努力变得更好！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>生活急救常识</title>
      <link href="/text/firstAid.html"/>
      <url>/text/firstAid.html</url>
      
        <content type="html"><![CDATA[<p>上周末，公司组织了一次关于生活急救常识的培训，收获很大，觉得有必要记录下来，牢牢掌握。</p><h2 id="烧伤急救"><a href="#烧伤急救" class="headerlink" title="烧伤急救"></a>烧伤急救</h2><blockquote><p>烧伤：因接触热、电或化学物质引起的创伤。<br>烧伤分类：热源、雷电、热液体、化学品、电流。</p></blockquote><h3 id="开水烫伤"><a href="#开水烫伤" class="headerlink" title="开水烫伤"></a>开水烫伤</h3><p>1.用大量的流水（注意水流，不要过大）持续冲洗降温，持续大约20分钟左右，让患处温度与周边正常皮肤温度一致。<br>2.局部轻度红肿或出现少量水泡（轻度烫伤），可在冲泡后，用烫伤药均匀涂抹，之后用无菌纱布或干净的纯棉毛巾覆盖于伤口并固定；<br>3.严重的紧急处理后赶快就医。</p><p><strong><font color="red">忌</font></strong><br>冰敷：不可以直接冰敷，以免冻伤。<br>用酱油涂：伤口上撒盐，会加重伤逝。<br>牙膏涂抹：牙膏会使皮肤热气无处散发。<br>用白酒冲洗伤口：皮肤未破溃时有一定降温效果；皮肤已破溃会加重疼痛，加深创面。</p><h3 id="明火烧伤"><a href="#明火烧伤" class="headerlink" title="明火烧伤"></a>明火烧伤</h3><p>若衣服着火，卧倒在地滚压灭火，或用水浇灭火焰。</p><p><strong>烧伤急救五字要诀，“冲、脱、泡、包、送”</strong></p><blockquote><p>冲：用清水冲洗烧伤创面；<br>脱：边冲边用轻柔的动作脱掉烧伤者的外衣，如果衣服粘住皮肉，不能强扯，可以用剪刀剪开；<br>泡：用冷水浸泡创面；<br>包：用干净的布单、衣物包扎伤处，有纱布最好；<br>送：尽快送到具有救治烧伤经验的医院治疗。</p></blockquote><p>当然就医一般看烧伤情况。</p><h3 id="电击烧伤"><a href="#电击烧伤" class="headerlink" title="电击烧伤"></a>电击烧伤</h3><p>1.先将电源切断，或用绝缘体将电源移开，如干木棒、树枝、扫帚柄等。<strong>电源不明时，切记不要直接用手接触触电者。</strong><br>2.在浴室或潮湿的地方，救护人要穿绝缘胶鞋戴胶皮手套或站在干燥木板上以保护自身安全。<br>3.如伤员无心跳、呼吸，拨打120呼叫救护车，并立即施行心肺复苏术，不要轻易放弃，一直坚持到医生护士到来为止。<br>4.局部烧伤病人应马上降温，然后就地取材进行创面的简易包扎，再送医院救治。</p><h2 id="窒息急救"><a href="#窒息急救" class="headerlink" title="窒息急救"></a>窒息急救</h2><blockquote><p>窒息：是指异物卡在咽喉部位气道处导致出现窒息的状况。<br>分为轻度异物堵塞和重度异物堵塞。</p></blockquote><h3 id="鱼刺卡喉"><a href="#鱼刺卡喉" class="headerlink" title="鱼刺卡喉"></a>鱼刺卡喉</h3><p>吃鱼难免会遇到鱼刺卡到喉咙，所以正确处理很重要。<br><img src="https://xeh1430.github.io/img/fishbone.jpg" alt=""><br>鱼刺如上图所示，一个三叉形状，<strong>一般鱼刺卡喉都是因为鱼刺倒叉在喉咙上。</strong></p><p>生活中很多处理方法都是错误的，如<strong>大口吞饭、大口喝水、大口喝醋，这些方法只会让鱼刺扎得越深，即使解决问题也会让食道受伤。</strong></p><p><strong><font color="red">正确方式：</font>轻微的咳嗽出来就好，再者张开嘴让亲友夹出来，严重得请及时到医院就医</strong></p><p><img src="https://xeh1430.github.io/img/aid.png" alt=""></p><h3 id="轻度异物堵塞"><a href="#轻度异物堵塞" class="headerlink" title="轻度异物堵塞"></a>轻度异物堵塞</h3><p>可以说话或发出声音、可以大声咳嗽。<strong>咳嗽将异物咳出就好。</strong></p><h3 id="重度度异物堵塞"><a href="#重度度异物堵塞" class="headerlink" title="重度度异物堵塞"></a>重度度异物堵塞</h3><p>无法呼吸、说话或者发出声音、有窒息的感觉。立即采取急救方法处理。</p><p><img src="https://xeh1430.github.io/img/HMAid.jpg" alt=""></p><blockquote><p><strong>海姆立克急救法（腹部冲击法）</strong>:急救者首先以前腿弓，后腿登的姿势站稳，然后使患者坐在自己弓起的大腿上，并让其身体略前倾。然后将双臂分别从患者两腋下前伸并环抱患者。左手握拳，右手从前方握住左手手腕，使左拳虎口贴在患者胸部下方，肚脐上方的上腹部中央，形成“合围”之势，然后突然用力收紧双臂，用左拳虎口向患者上腹部内上方猛烈施压，迫使其上腹部下陷。这样由于腹部下陷，腹腔内容上移，迫使膈肌上升而挤压肺及支气管，这样每次冲击可以为气道提供一定的气量，从而将异物从气管内冲出。施压完毕后立即放松手臂，然后再重复操作，直到异物被排出。</p></blockquote><h2 id="动物咬伤"><a href="#动物咬伤" class="headerlink" title="动物咬伤"></a>动物咬伤</h2><h3 id="猫狗咬伤"><a href="#猫狗咬伤" class="headerlink" title="猫狗咬伤"></a>猫狗咬伤</h3><p><strong>清理伤口</strong><br>伤口不大，用<strong>肥皂水和清水交替清洗伤口 15 分钟</strong>，用碘伏和酒精消毒，不要包扎；<br>咬伤严重，那就赶快直接送医院。</p><p><strong>判断是否要注射疫苗</strong><br>1.如果被不知哪来的流浪猫狗咬伤、抓伤，是百分百要注射疫苗的。<br>2.如果是被宠物猫狗咬伤、抓伤，就要具体看了。</p><p><strong>怎么判断咬你的猫猫狗狗有没有狂犬病呢？「十日观察法」</strong><br>猫狗只有感染了病毒，在发病前几天才有传染性，而狂犬病病毒凶猛，一旦发病，短则三五日，长则十日，这个猫狗也是要口吐白沫而死的。被猫狗咬伤，如果 10 天之后，这只猫或者狗安然无恙，那么基本可以判定，猫狗是健康的，自己没有感染狂犬病毒。</p><h4 id="狂犬病"><a href="#狂犬病" class="headerlink" title="狂犬病"></a>狂犬病</h4><blockquote><p>狂犬病病毒是一种嗜神经病毒，并不是通过血液传染，只要皮肤破损，就能感染。病毒沿着人的外周神经直捣中枢神经系统，引发神经病变。狂犬病的发病很快，死亡率几乎百分百，一旦发病，没得治，3～5 天就会死亡。</p></blockquote><p><strong>狂犬病的潜伏期并不长，</strong>通常是 1～3 个月，最短的不到 1 周，极少数会超过 1 年，而不是传闻中的 20 年。<br><strong>没被咬出血，也会感染狂犬病病毒；现阶段狂犬病没法治，只能注射疫苗；不仅猫和狗会携带狂犬病病毒，很多家畜和野生动物都会携带。</strong></p><h3 id="蜜蜂蜇伤"><a href="#蜜蜂蜇伤" class="headerlink" title="蜜蜂蜇伤"></a>蜜蜂蜇伤</h3><p>1.刮掉毒刺、毒囊；<br>2.用大量肥皂水冲洗伤口；<br>3.因为体质问题，有些人会出现呼吸困难、伤口红肿、呕吐或腹泻等症状，请立即去医院就医。</p><h2 id="流鼻血"><a href="#流鼻血" class="headerlink" title="流鼻血"></a>流鼻血</h2><p>流鼻血一般是鼻粘膜或毛细血管破裂导致。</p><p>错误方法：仰头，塞纸巾在鼻孔里。</p><p><strong>正确方式：低头前倾，压按鼻翼止血。</strong></p><h2 id="心肺复苏术"><a href="#心肺复苏术" class="headerlink" title="心肺复苏术"></a>心肺复苏术</h2><p>心搏骤停一旦发生，如得不到即刻及时地抢救复苏，4～6min后会造成患者脑和其他人体重要器官组织的不可逆的损害，因此心搏骤停后的心肺复苏（cardiopulmonary resuscitation, CPR）必须在现场立即进行。</p><p><img src="https://xeh1430.github.io/img/CPR.jpg" alt=""></p><h3 id="胸外心脏按压"><a href="#胸外心脏按压" class="headerlink" title="胸外心脏按压"></a>胸外心脏按压</h3><p><img src="https://xeh1430.github.io/img/point.jpg" alt=""><br><strong>按压位置：胸骨中、下1/3交界处的正中线上或剑突上2.5～5cm处（一般是两乳头连线中间处）；<br>手掌根部紧放在按压部位，两手平行重叠且手指交叉互握抬起，使手指脱离胸壁。</strong><br><img src="https://xeh1430.github.io/img/xway.jpg" alt=""></p><p>按过模型，这是个体力活，真的累！</p><h3 id="好人法"><a href="#好人法" class="headerlink" title="好人法"></a>好人法</h3><blockquote><p>《中华人民共和国民法总则》第184条于2017年3月15日，第十二届全国人民代表大会第五次会议通过。<br><strong>规定：“因自愿实施紧急救助行为造成受助人损害的，救助人不承担民事责任。”</strong></p></blockquote><font color="red">好人法，善意救助者责任豁免！</font>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>数据结构与算法(二)——数组、链表</title>
      <link href="/text/dataStructure2.html"/>
      <url>/text/dataStructure2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>常用数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Tire树(字典树)<br>线性表结构：数组、链表、栈、队列、散列表<br>非线性表：二叉树、堆、图、树</strong></p></blockquote><p><strong>线性表（Linear List）</strong>是数据排成像一条线一样的结构，每个线性表上的数据最多只有前和后两个方向。<br><strong>非线性表</strong>，数据之间并不是简单的前后关系。</p><h2 id="数据结构的特性"><a href="#数据结构的特性" class="headerlink" title="数据结构的特性"></a>数据结构的特性</h2><p><img src="https://xeh1430.github.io/img/dataStructure.png" alt="">  </p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>数组是一种线性表数据结构；它用一组<strong>连续的内存空间</strong>，来存储一组具有相同类型的数据。<br><strong>连续的内存空间、相同的数据类型，所以数组可以随机访问，但对数组进行删除插入，为了保证数组的连续性，就要做大量的数据搬移工作。</strong><br>数组都是从 0 开始编号的，从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。</p></blockquote><p><strong>数组适合查找操作，但是查找的时间复杂度并不为 O(1)。<br>即便是排好的数组，用二分查找，时间复杂度也是O（logn）。<br>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。</strong></p><p>优点：简单易用，查找快<br>缺点：大小固定，增删慢</p><p><strong>数组如何实现下标随机访问？</strong><br>例：长度为 10 的 int 类型的数组 int[] a = newint[10]，计算机给数组 a[10]，分配了一块连续内存空间 1000～1039，其中，内存块的首地址为 base_address =1000。<br><img src="https://xeh1430.github.io/img/arrayCache.png" alt=""><br>计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：<br>$$a[i]_address = base_address + i * data_type_size$$<br>data_type_size 表示数组中每个元素的大小。</p><p><strong>容器的优劣</strong><br>相比于数组，java 中的 ArrayList 将很多数组操作的细节封装起来，并支持动态扩容。一旦超过存储容量，扩容时比较耗内存，因为涉及到内存申请和数据搬移。</p><p><strong>数组适合的场景</strong><br>1.Java ArrayList 的使用涉及装箱拆箱，有一定的性能损耗，如果特别关注性能，可以考虑数组<br>2.若数据大小事先已知，并且涉及的数据操作非常简单，可以使用数组。<br>3.表示多维数组时，数组往往更加直观。<br>4.业务开发容器即可，底层开发，如网络框架，性能优化。选择数组。</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote><p>从内存结构来看，链表的内存结构是<strong>不连续的内存空间</strong>，是将一组零散的内存块串联起来，从而进行数据存储的数据结构。<br><strong>链表</strong>通过指针将一组零散的内存块串联在一起，<strong>内存块</strong>称为链表的“结点”(Node 存储数据、记录链上的下一个结点的地址),<strong>后继指针</strong>(next)用来记录下个结点地址的指针。</p></blockquote><p>优点：增删快 O(1)，支持动态扩容<br>缺点：查找慢 O(n)，内存空间消耗大，频繁增删，容易造成冗余</p><p><strong>三种最常见的链表结构：单链表、双向链表和循环链表</strong></p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>每个节点只包含一个指针，即后继指针。<br>单链表有两个特殊的节点，即头节点和尾节点。<br>头结点用来记录链表的基地址，尾结点指向一个空地址 NULL，表示这是链表上最后一个结点。</p><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>除了尾节点的后继指针指向首节点的地址外均与单链表一致。<br>适用于存储有循环特点的数据，比如<a href="https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">约瑟夫问题</a>。</p><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>节点除了存储数据外，还有两个指针分别指向前一个节点地址（前驱指针 prev）和下一个节点地址（后继指针 next），首节点的前驱指针 prev 和尾节点的后继指针均指向空地址</p><h3 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h3><p><strong>首节点的前驱指针指向尾节点，尾节点的后继指针指向首节点</strong></p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><table><thead><tr><th style="text-align:center">时间复杂度</th><th style="text-align:center">数组</th><th style="text-align:center">链表</th></tr></thead><tbody><tr><td style="text-align:center">随机访问</td><td style="text-align:center">$$O(1)$$</td><td style="text-align:center">$$O(n)$$</td></tr><tr><td style="text-align:center">插入删除</td><td style="text-align:center">$$O(n)$$</td><td style="text-align:center">$$O(1)$$</td></tr></tbody></table><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="LRU-缓存策略"><a href="#LRU-缓存策略" class="headerlink" title="LRU 缓存策略"></a>LRU 缓存策略</h3><blockquote><p>缓存是一种提高数据读取性能的技术。<br>缓存的大小是有限的，当缓存被用满时，哪些数据应该被清理出去，哪些数据应该被保留？就需要用到缓存淘汰策略。<br><strong>缓存淘汰策略是当缓存被用满时清理数据的优先顺序。</strong></p></blockquote><p><strong>常见的三种缓存淘汰策略</strong><br>先进先出策略 FIFO（First In，First Out）、最少使用策略 LFU（Least Frenquently Used）、最近最少使用策略 LRU（Least Recently Used）。</p><h3 id="链表实现-LRU"><a href="#链表实现-LRU" class="headerlink" title="链表实现 LRU"></a>链表实现 LRU</h3><p>当访问的数据没有存储在缓存的链表中时，直接将数据插入链表表头，时间复杂度为O(1)；<br>当访问的数据存在于存储的链表中时，将该数据对应的节点，插入到链表表头,时间复杂度为O(n)。<br>如果缓存被占满，则从链表尾部的数据开始清理，时间复杂度为O(1)。</p><blockquote><p><strong>PS:</strong>维护一个有序链表，尾部为最早访问的数据，头部为最新，现插入一数据<br>1.遍历，查看数据是否存在<br>2.1 存在，删除已有数据，将数据插入到头部<br>2.2 不存在<br>2.2.1 链表没满，直接插入到头部<br>2.2.2 链表满了，删除链表尾节点，将数据插入头部</p></blockquote><h3 id="数组实现-LRU"><a href="#数组实现-LRU" class="headerlink" title="数组实现 LRU"></a>数组实现 LRU</h3><p><strong>1.首位置保存最新访问数据，末尾位置优先清理</strong><br>当访问的数据未存在于缓存的数组中时，直接将数据插入数组第一个元素位置，此时数组所有元素需要向后移动1个位置，时间复杂度为O(n)；<br>当访问的数据存在于缓存的数组中时，查找到数据并将其插入数组的第一个位置，此时亦需移动数组元素，时间复杂度为O(n)。<br>缓存用满时，则清理掉末尾的数据，时间复杂度为O(1)。</p><p><strong>2.首位置优先清理，末尾位置保存最新访问数据</strong><br>当访问的数据未存在于缓存的数组中时，直接将数据添加进数组作为当前最有一个元素时间复杂度为O(1)；<br>当访问的数据存在于缓存的数组中时，查找到数据并将其插入当前数组最后一个元素的位置，此时亦需移动数组元素，时间复杂度为O(n)。<br>缓存用满时，则清理掉数组首位置的元素，且剩余数组元素需整体前移一位，时间复杂度为O(n)。<br>（优化：清理的时候可以考虑一次性清理一定数量，从而降低清理次数，提高性能。）</p><h3 id="链表回文串验证"><a href="#链表回文串验证" class="headerlink" title="链表回文串验证"></a>链表回文串验证</h3><p>使用快慢两个指针找到链表中点，慢指针每次前进一步，快指针每次前进两步。在慢指针前进的过程中，同时修改其 next 指针，使得链表前半部分反序。最后比较中点两侧的链表是否相等。<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</span><br><span class="line"> *     <span class="built_in">int</span> val;</span><br><span class="line"> *     ListNode <span class="keyword">next</span>;</span><br><span class="line"> *     ListNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">  <span class="keyword">public</span> boolean isPalindrome(ListNode head) &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.<span class="keyword">next</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      return <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode prev = <span class="literal">null</span>;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.<span class="keyword">next</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      fast = fast.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">      ListNode <span class="keyword">next</span> = slow.<span class="keyword">next</span>;</span><br><span class="line">      slow.<span class="keyword">next</span> = prev;</span><br><span class="line">      prev = slow;</span><br><span class="line">      slow = <span class="keyword">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">      slow = slow.<span class="keyword">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (slow != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (slow.val != prev.val) &#123;</span><br><span class="line">        return <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      slow = slow.<span class="keyword">next</span>;</span><br><span class="line">      prev = prev.<span class="keyword">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="时空替换思想"><a href="#时空替换思想" class="headerlink" title="时空替换思想"></a>时空替换思想</h2><p><strong>时空替换思想：“用空间换时间” 与 “用时间换空间”</strong><br>当内存空间充足的时候，如果我们更加追求代码的执行速度，我们就可以选择空间复杂度相对较高，时间复杂度小相对较低的算法和数据结构，缓存就是空间换时间的例子。如果内存比较紧缺，比如代码跑在手机或者单片机上，这时，就要反过来用时间换空间的思路。</p><p><strong>「空间换时间」某些情况下”双向链表”替代”单向链表”；缓存</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>数据结构与算法(一)——复杂度分析</title>
      <link href="/text/dataStructure1.html"/>
      <url>/text/dataStructure1.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>数据结构就是指一组数据的存储结构。<br>算法就是操作数据的一组方法。<br>数据结构是为算法服务的，算法要作用在特定的数据结构之上。</p></blockquote><p><strong>数据结构与算法中最重要的概念：<font color="red">复杂度分析</font></strong><br><strong>最常用、最基础的 20 个数据结构与算法：</strong><br>数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Tire树(字典树)<br>算法： 递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>复杂度</strong>也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。<br><strong>复杂度分析</strong>表示效率和资源消耗的度量衡。</p><p><strong>为什么要进行复杂度分析</strong><br>1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。<br>2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。</p><p><strong>复杂度分析法则</strong><br>1.单段代码看高频：比如循环。<br>2.多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。<br>3.嵌套代码求乘积：比如递归、多重循环等<br>4.多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。</p><h3 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h3><p><strong>算法的执行时间 T(n) 与每行代码的执行次数 n 成正比</strong><br>$$T(n) = O( f(n) )$$<br>    T(n)：代码执行的时间；<br>    n：表示数据规模的大小；<br>    f(n)：表示每行代码执行的次数总和</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cal(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;   <span class="comment">//  1</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;   <span class="comment">//  1</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;  <span class="comment">//  n</span></span><br><span class="line">    <span class="keyword">sum</span> = <span class="keyword">sum</span> + i;   <span class="comment">//  n</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sum</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$$时间复杂度为：T(n) = O(2n+2)$$</p><p><font color="red">当 n 很大时，公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。</font><br>    $$T(n) = O(2n+2)  -&gt;  T(n) =O(n)$$</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。</p><blockquote><p><strong>判断依据</strong><br>只关注循环执行次数最多的一段<br>加法法则：总复杂度等于量级最大的那段代码的复杂度<br>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的积</p></blockquote><table><thead><tr><th style="text-align:center">复杂度量级</th><th style="text-align:left"></th><th style="text-align:center"></th><th style="text-align:left"></th><th style="text-align:center"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:center">常量阶</td><td style="text-align:left">$$O(1)$$</td><td style="text-align:center">指数阶</td><td style="text-align:left">$$O(2^n)$$</td><td style="text-align:center">对数阶</td><td style="text-align:left">$$O(logn)$$</td></tr><tr><td style="text-align:center">阶乘阶</td><td style="text-align:left">$$O(n!)$$</td><td style="text-align:center">线性阶</td><td style="text-align:left">$$O(n)$$</td><td style="text-align:center">线性对数阶</td><td style="text-align:left">$$O(nlogn)$$</td></tr><tr><td style="text-align:center">平方阶</td><td style="text-align:left">$$O(n^2)$$</td><td style="text-align:center">立方阶</td><td style="text-align:left">$$O(n^3)$$</td><td style="text-align:center">k次方阶</td><td style="text-align:left">$$O(n^k)$$</td></tr></tbody></table><p><strong>非多项式量级:</strong> <code>O(2^n)</code>和 <code>O(n!)</code></p><p>时间复杂度为非多项式量级的算法问题叫作 NP（Non-Deterministic Polynomial，非确定多项式）问题。</p><p><font color="red">当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。</font><br><br><strong>复杂度分析的4个概念</strong><br>1.<strong>最好情况时间复杂度</strong>（best case time complexity）：代码在最理想情况下执行的时间复杂度  O(1)。<br>2.<strong>最坏情况时间复杂度</strong>（worst case time complexity）：代码在最坏情况下执行的时间复杂度  O(n)。<br>3.<strong>平均情况时间复杂度</strong>（average case time complexity）：代码在所有情况下执行的次数的加权平均值表示，代码在不同情况下复杂度出现量级差别时使用。<br>4.<strong>均摊时间复杂度</strong>（amortized time complexity）：代码在大部分情况下时间复杂度都很低，个别情况下时间复杂度比较高，操作之间存在前后连贯的时序关系，将较高时间复杂度的耗时，平摊到时间复杂度比较低的操作上。基本上均摊结果就等于低级别复杂度 O(1)。(使用摊还分析法计算)</p><p><strong>为什么要引入这4个概念？</strong><br>1.同一段代码在不同情况下时间复杂度会出现量级差异，为了更全面，更准确的描述代码的时间复杂度，所以引入这4个概念。<br>2.代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度。大多数情况下，是不需要区别分析它们的。</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。<br><strong>空间复杂度是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。</strong><br>复杂度判断与时间复杂度类似，一般复杂度量级为：<strong>O(1)、O(n)、O(n^2)</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>知识的诅咒</title>
      <link href="/text/knowledgeCurse.html"/>
      <url>/text/knowledgeCurse.html</url>
      
        <content type="html"><![CDATA[<h3 id="什么是知识的诅咒"><a href="#什么是知识的诅咒" class="headerlink" title="什么是知识的诅咒"></a>什么是知识的诅咒</h3><blockquote><p><strong>维基百科：一种认知偏差，当个体与其他个体交流时，他们会在不知不觉中假设其他人有理解的背景。</strong></p></blockquote><p><font color="red">我们一旦知道了某事，就无法想象这件事在未知者眼中的样子。当我们把自己知道的知识解释给别人的时候，因为信息的不对等，我们很难把自己知道的完完全全给对方解释清楚。总之，我们的知识“诅咒”了我们。</font><br><br>我们所认为的常识，可能就是别人的信息盲点。（信息不对称，既是商机也可能是一种沟通障碍）</p><h3 id="表现形式"><a href="#表现形式" class="headerlink" title="表现形式"></a>表现形式</h3><p>学计算机的难以理解连百度都不会用的人如何生活。在我们享受 4G 时，如何体会尚未上过网的 5 亿中国人如何思考（《中国互联网络发展状况统计报告》统计显示，截至 2018年6月，中国网民规模为8.02亿，中国人口 13.9 亿，差额 5 亿多人）</p><p>当你知道某个知识，你就很难明白不知道这个知识的人到底是什么状态。或者你学会了某个技能你也完全忘了没会前是什么样子，好像从一开始就会一样。如果你不会一个东西，你往往会认为，会的人好厉害。</p><h3 id="如何打破"><a href="#如何打破" class="headerlink" title="如何打破"></a>如何打破</h3><h4 id="1-扩大自己的圈子"><a href="#1-扩大自己的圈子" class="headerlink" title="1. 扩大自己的圈子"></a>1. 扩大自己的圈子</h4><p>了解不同行业的人是如何在不同层面思考问题，缩小认知偏差。</p><h4 id="2-简化概念"><a href="#2-简化概念" class="headerlink" title="2. 简化概念"></a>2. 简化概念</h4><p>简单直白的话更易于理解。在给非专业较低水平的人交流时，不要长篇大论，也不应该过于深入的解读，我们要做的是让他们了解，而不是理解。</p><h4 id="3-用场景代替抽象名词"><a href="#3-用场景代替抽象名词" class="headerlink" title="3. 用场景代替抽象名词"></a>3. 用场景代替抽象名词</h4><p>善用比喻和故事，让听的人自己在场景中感受，而不是强加我们的理解认识给他们。</p><h2 id="看见差异，尊重差异"><a href="#看见差异，尊重差异" class="headerlink" title="看见差异，尊重差异"></a><center><font color="red">看见差异，尊重差异</font></center></h2>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring Boot 使用 Spring Security (二)</title>
      <link href="/text/springSecurity2.html"/>
      <url>/text/springSecurity2.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p><strong>使用 springboot+mybatis＋SpringSecurity 实现数据库动态的管理用户、角色、权限管理。</strong> </p><p><strong>细分角色和权限，并将用户、角色、权限和资源均采用数据库存储，并且自定义滤器，代替原有的FilterSecurityInterceptor过滤器，并分别实现 AccessDecisionManager、InvocationSecurityMetadataSourceService 和 serDetailsService，并在配置文件中进行相应配置。</strong></p></blockquote><h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建用户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> <span class="keyword">comment</span><span class="string">'主键id'</span>,</span><br><span class="line">  username <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>  <span class="keyword">comment</span><span class="string">'用户名'</span>,</span><br><span class="line">  <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span><span class="string">'密码'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#角色表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">role</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span> <span class="keyword">comment</span><span class="string">'主键id'</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span><span class="string">'角色名'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户角色表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_role</span><br><span class="line">(</span><br><span class="line">  user_id <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span><span class="string">'用户id'</span>,</span><br><span class="line">  role_id <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span><span class="string">'角色id'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#权限表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> permission (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span><span class="string">'主键id'</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span> (<span class="number">200</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span><span class="string">'角色名'</span>,</span><br><span class="line">  description <span class="built_in">varchar</span> (<span class="number">200</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span><span class="string">'描述'</span>,</span><br><span class="line">  <span class="keyword">url</span> <span class="built_in">varchar</span> (<span class="number">200</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span><span class="string">'路径'</span>,</span><br><span class="line">  pid <span class="built_in">int</span> <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span><span class="string">'上级id'</span>,</span><br><span class="line">  primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#角色权限中间表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> permission_role (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span><span class="string">'主键id'</span>,</span><br><span class="line">  role_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span><span class="string">'角色id'</span>,</span><br><span class="line">  permission_id <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span><span class="string">'权限id'</span>,</span><br><span class="line">  primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入用户</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>)<span class="keyword">VALUES</span>(<span class="string">'1'</span>,<span class="keyword">admin</span><span class="string">','</span><span class="keyword">admin</span><span class="string">');</span></span><br><span class="line"><span class="string">INSERT INTO user(id,username,password)VALUES('</span><span class="number">2</span><span class="string">',user'</span>,<span class="string">'user'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(<span class="keyword">id</span>,username,<span class="keyword">password</span>)<span class="keyword">VALUES</span>(<span class="string">'3'</span>,<span class="keyword">test</span><span class="string">','</span><span class="keyword">test</span><span class="string">');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#插入角色</span></span><br><span class="line"><span class="string">INSERT INTO role VALUES ('</span><span class="number">1</span><span class="string">', '</span>ROLE_ADMIN<span class="string">');  </span></span><br><span class="line"><span class="string">INSERT INTO role VALUES ('</span><span class="number">2</span><span class="string">', '</span>ROLE_USER<span class="string">'); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INSERT INTO user_role VALUES ('</span><span class="number">1</span><span class="string">', '</span><span class="number">1</span><span class="string">');  </span></span><br><span class="line"><span class="string">INSERT INTO user_role VALUES ('</span><span class="number">1</span><span class="string">', '</span><span class="number">2</span><span class="string">');  </span></span><br><span class="line"><span class="string">INSERT INTO user_role VALUES ('</span><span class="number">2</span><span class="string">', '</span><span class="number">2</span><span class="string">');  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">INSERT INTO permission VALUES ('</span><span class="number">1</span><span class="string">', '</span>ROLE_USER<span class="string">', '</span><span class="keyword">user</span><span class="string">', '</span>/<span class="keyword">admin</span>/home<span class="string">', null);</span></span><br><span class="line"><span class="string">INSERT INTO permission_role VALUES ('</span><span class="number">1</span><span class="string">', '</span><span class="number">2</span><span class="string">', '</span><span class="number">1</span><span class="string">'));</span></span><br></pre></td></tr></table></figure><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://xeh1430.github.io/img/securityList.png" alt="项目结构"></p><h2 id="引入-maven-依赖"><a href="#引入-maven-依赖" class="headerlink" title="引入 maven 依赖"></a>引入 maven 依赖</h2><p>pom 文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql版本根据自身情况调整--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--thymeleaf页面展示控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="配置数据库信息"><a href="#配置数据库信息" class="headerlink" title="配置数据库信息"></a>配置数据库信息</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.url</span>=jdbc:mysql:<span class="comment">//localhost:3306/world</span></span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.username</span>=root</span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.password</span>=<span class="number">123456</span></span><br><span class="line">spring<span class="selector-class">.jpa</span><span class="selector-class">.database</span>=mysql</span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.driver-class-name</span>=com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></span><br><span class="line"></span><br><span class="line">server.port=<span class="number">8088</span></span><br><span class="line">        </span><br><span class="line">mybatis.mapper-locations=classpath:UserMapper.xml</span><br></pre></td></tr></table></figure><h2 id="创建-pojo-dao-mapper-controller-文件"><a href="#创建-pojo-dao-mapper-controller-文件" class="headerlink" title="创建 pojo/dao/mapper/controller 文件"></a>创建 pojo/dao/mapper/controller 文件</h2><p><strong><font color="red">PS: 功能比较简单，所以省略 service 文件，直接调用 dao 层文件；并将权限表的相关查询操作写在同一 mapper 文件</font></strong></p><p><strong>User.java</strong><br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> int id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Getter 和 Setter 自行补充 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Role.java</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Getter 和 Setter 自行补充 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Permission.java</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class Role &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">//权限名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="comment">//权限描述</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> descritpion;</span><br><span class="line">    <span class="comment">//授权链接</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> url;</span><br><span class="line">    <span class="comment">//父节点id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Getter 和 Setter 自行补充 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong> UserMapper.java </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据用户名查找用户所有权限信息</span></span><br><span class="line">    <span class="function">User <span class="title">findByUserName</span><span class="params">(String username)</span></span>;</span><br><span class="line">    <span class="comment">//获取所有权限信息</span></span><br><span class="line">    <span class="function">List&lt;Permission&gt; <span class="title">findAllPermission</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="function">List&lt;Permission&gt; <span class="title">findByAdminUserId</span><span class="params">(<span class="keyword">int</span> userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>UserMapper.xml</strong><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml <span class="built_in">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"com.xeh.security.dao.UserMapper"</span>&gt;</span><br><span class="line">    &lt;resultMap <span class="built_in">id</span>=<span class="string">"userMap"</span> type=<span class="string">"com.xeh.security.model.User"</span>&gt;</span><br><span class="line">        &lt;<span class="built_in">id</span> <span class="keyword">property</span>=<span class="string">"id"</span> column=<span class="string">"ID"</span>/&gt;</span><br><span class="line">        &lt;<span class="literal">result</span> <span class="keyword">property</span>=<span class="string">"username"</span> column=<span class="string">"username"</span>/&gt;</span><br><span class="line">        &lt;<span class="literal">result</span> <span class="keyword">property</span>=<span class="string">"password"</span> column=<span class="string">"PASSWORD"</span>/&gt;</span><br><span class="line">        &lt;collection <span class="keyword">property</span>=<span class="string">"roles"</span> ofType=<span class="string">"com.xeh.security.model.Role"</span>&gt;</span><br><span class="line">            &lt;<span class="literal">result</span> column=<span class="string">"name"</span> <span class="keyword">property</span>=<span class="string">"name"</span>/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select <span class="built_in">id</span>=<span class="string">"findByUserName"</span> parameterType=<span class="string">"String"</span> resultMap=<span class="string">"userMap"</span>&gt;</span><br><span class="line">        select u.*</span><br><span class="line">        ,r.<span class="built_in">name</span></span><br><span class="line">        <span class="keyword">from</span> user u</span><br><span class="line">        LEFT JOIN user_role sru <span class="keyword">on</span> u.<span class="built_in">id</span> = sru.user_id</span><br><span class="line">        LEFT JOIN role r <span class="keyword">on</span> sru.role_id = r.<span class="built_in">id</span></span><br><span class="line">        <span class="keyword">where</span> username = <span class="comment">#&#123;username&#125;</span></span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select <span class="built_in">id</span>=<span class="string">"findAllPermission"</span> resultType=<span class="string">"com.xeh.security.model.Permission"</span>&gt;</span><br><span class="line">        select * <span class="keyword">from</span> permission</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select <span class="built_in">id</span>=<span class="string">"findByAdminUserId"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"com.xeh.security.model.Permission"</span>&gt;</span><br><span class="line">       select p.*</span><br><span class="line">        <span class="keyword">from</span> user u</span><br><span class="line">        left join user_role sru <span class="keyword">on</span> u.<span class="built_in">id</span> = sru.user_id</span><br><span class="line">        left join role r <span class="keyword">on</span> sru.role_id = r.<span class="built_in">id</span></span><br><span class="line">        left join permission_role spr <span class="keyword">on</span> spr.role_id = r.<span class="built_in">id</span></span><br><span class="line">        left join permission p <span class="keyword">on</span> p.<span class="built_in">id</span> = spr.permission_id</span><br><span class="line">        <span class="keyword">where</span> u.<span class="built_in">id</span> = <span class="comment">#&#123;userId&#125;</span></span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p><strong>HelloController.java</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/admin/hello"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String index()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value =&#123;<span class="meta-string">""</span>,<span class="meta-string">"/"</span>,<span class="meta-string">"/home"</span>&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String home()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/login"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String login()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="页面文件"><a href="#页面文件" class="headerlink" title="页面文件"></a>页面文件</h2><p><strong>home.html</strong><br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> </span></span></span><br><span class="line"><span class="xml">xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击 <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">admin</span>/hello&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>这里<span class="tag">&lt;/<span class="name">a</span>&gt;</span>进入hello页面.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><strong>hello.html</strong><br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span></span><br><span class="line"><span class="xml">      xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:inline</span>=<span class="string">"text"</span>&gt;</span>Hello [[$</span><span class="template-tag">&#123;#<span class="name">httpServletRequest.remoteUser</span>&#125;</span><span class="xml">]]!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 用户认证通过才能才显示 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>权限:<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.authorities"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('ADMIN')"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 用户角色为“ADMIN”才显示 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>【管理员】才能看见的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('USER')"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 用户角色具有“USER”权限才显示 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>【普通用户】才能看到的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">logout</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注销"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><strong>login.html</strong><br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;param.error&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    用户名或密码错误</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;param.logout&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    账户已退出登录</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">login</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/login"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> 用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> 密  码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><strong>这样，我们就搭好了连接数据库的 springboot 项目，接下来就是添加权限了</strong></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><h3 id="SpringSecurity-登录认证流程图"><a href="#SpringSecurity-登录认证流程图" class="headerlink" title="SpringSecurity 登录认证流程图"></a>SpringSecurity 登录认证流程图</h3><p><img src="https://xeh1430.github.io/img/securityProcess.png" alt=""></p><h3 id="SpringSecurity-权限管理流程图"><a href="#SpringSecurity-权限管理流程图" class="headerlink" title="SpringSecurity 权限管理流程图"></a>SpringSecurity 权限管理流程图</h3><p><img src="https://xeh1430.github.io/img/securityPermission.png" alt=""></p><h2 id="添加-SpringSecurity-实现登录及权限验证"><a href="#添加-SpringSecurity-实现登录及权限验证" class="headerlink" title="添加 SpringSecurity,实现登录及权限验证"></a>添加 SpringSecurity,实现登录及权限验证</h2><h3 id="创建-Spring-Security-的配置类-WebSecurityConfig"><a href="#创建-Spring-Security-的配置类-WebSecurityConfig" class="headerlink" title="创建 Spring Security 的配置类 WebSecurityConfig"></a>创建 Spring Security 的配置类 WebSecurityConfig</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@EnableWebSecurity</span>  <span class="comment">//使得Spring Security提供并且支持了Spring MVC的集成</span></span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户无权限拦截处理类</span></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private MyAccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权管理</span></span><br><span class="line"><span class="variable">@Autowired</span></span><br><span class="line">private MyFilterSecurityInterceptor myFilterSecurityInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册UserDetailsService 的bean，通过用户名加载与该用户的用户名、密码以及权限相关的信息</span></span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    UserDetailsService customUserService()&#123; <span class="comment">//注册UserDetailsService 的bean</span></span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">CustomUserDetailService</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*定义认证规则*/</span></span><br><span class="line">    @<span class="selector-tag">Override</span></span><br><span class="line">    <span class="selector-tag">protected</span> <span class="selector-tag">void</span> <span class="selector-tag">configure</span>(AuthenticationManagerBuilder auth) <span class="selector-tag">throws</span> <span class="selector-tag">Exception</span> &#123;</span><br><span class="line">        <span class="selector-tag">auth</span><span class="selector-class">.userDetailsService</span>(customUserService())<span class="selector-class">.passwordEncoder</span>(new MyPasswordEncoder()); <span class="comment">//user Details Service验证</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对URL进行权限配置</span></span><br><span class="line"><span class="comment">     * 该方法定义url的访问权限，登录路径，注销</span></span><br><span class="line"><span class="comment">     * @param http</span></span><br><span class="line"><span class="comment">     * @throws Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="selector-tag">Override</span></span><br><span class="line">    <span class="selector-tag">protected</span> <span class="selector-tag">void</span> <span class="selector-tag">configure</span>(HttpSecurity http) <span class="selector-tag">throws</span> <span class="selector-tag">Exception</span> &#123;</span><br><span class="line">        <span class="selector-tag">http</span></span><br><span class="line">            <span class="selector-class">.authorizeRequests</span>()</span><br><span class="line">            <span class="selector-class">.antMatchers</span>(<span class="string">"/"</span>, <span class="string">"/home"</span>)<span class="selector-class">.permitAll</span>()  <span class="comment">//任何人(包括没有经过验证的)都可以访问"/"和"/home"</span></span><br><span class="line">            <span class="comment">//.antMatchers("/admin/**").access("hasRole('USER')")</span></span><br><span class="line">            <span class="selector-class">.anyRequest</span>()<span class="selector-class">.authenticated</span>()  <span class="comment">//所有其他的URL都需要用户进行验证</span></span><br><span class="line">            <span class="selector-class">.and</span>()</span><br><span class="line">            <span class="comment">// 配置被拦截时的处理</span></span><br><span class="line">            <span class="selector-class">.exceptionHandling</span>()</span><br><span class="line">            <span class="comment">//添加无权限时的处理</span></span><br><span class="line">            <span class="selector-class">.accessDeniedHandler</span>(accessDeniedHandler)</span><br><span class="line">            <span class="selector-class">.and</span>()</span><br><span class="line">            <span class="selector-class">.formLogin</span>()  <span class="comment">//使用Java配置默认值设置了基于表单的验证。使用POST提交到"/login"时，需要用"username"和"password"进行验证</span></span><br><span class="line">            <span class="selector-class">.loginPage</span>(<span class="string">"/login"</span>)  <span class="comment">//指定在需要登录时将用户发送到的URL</span></span><br><span class="line">            <span class="selector-class">.permitAll</span>()  <span class="comment">//用户可以访问formLogin()相关的任何URL</span></span><br><span class="line">            <span class="selector-class">.and</span>()</span><br><span class="line">            <span class="selector-class">.logout</span>()  <span class="comment">//注销</span></span><br><span class="line">            <span class="selector-class">.permitAll</span>();  <span class="comment">//用户可以访问logout()相关的任何URL</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//权限控制 Filter</span></span><br><span class="line">        <span class="selector-tag">http</span><span class="selector-class">.addFilterBefore</span>(myFilterSecurityInterceptor, FilterSecurityInterceptor.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*忽略静态资源*/</span></span><br><span class="line"><span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configure(WebSecurity web) &#123;</span></span><br><span class="line"><span class="comment">        web.ignoring().antMatchers("/resources/static/**");</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-UserDetailsService（认证管理器）"><a href="#实现-UserDetailsService（认证管理器）" class="headerlink" title="实现 UserDetailsService（认证管理器）"></a>实现 UserDetailsService（认证管理器）</h3><p><strong><font color="red">自定义UserDetailsService 接口(认证管理器)，储存用户所有角色</font></strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper usersMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户名加载与该用户的用户名、密码以及权限相关的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails loadUserByUsername(String username) <span class="keyword">throws</span> DisabledException &#123;</span><br><span class="line">        User user = usersMapper.findByUserName(username);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            List&lt;Permission&gt; permissions = usersMapper.findByAdminUserId(user.getId());</span><br><span class="line">            List&lt;GrantedAuthority&gt; grantedAuthorities = <span class="keyword">new</span> ArrayList &lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Permission <span class="string">permission :</span> permissions) &#123;</span><br><span class="line">                <span class="keyword">if</span> (permission != <span class="literal">null</span> &amp;&amp; permission.getName()!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    GrantedAuthority grantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(permission.getName());</span><br><span class="line">                    <span class="comment">//1：此处将权限信息添加到 GrantedAuthority 对象中，在后面进行全权限验证时会使用GrantedAuthority 对象。</span></span><br><span class="line">                    grantedAuthorities.add(grantedAuthority);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), grantedAuthorities);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//throw new UsernameNotFoundException("用户名不存在");</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DisabledException(<span class="string">"----&gt;UserName :"</span> + username + <span class="string">" not found!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实现-PasswordEncoder（加密类）"><a href="#实现-PasswordEncoder（加密类）" class="headerlink" title="实现 PasswordEncoder（加密类）"></a>实现 PasswordEncoder（加密类）</h3><p><strong><font color="red">spring security 版本在 5.0 后要添加 PasswordEncoder 验证</font></strong><br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPasswordEncoder</span> <span class="keyword">implements</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> charSequence.<span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.equals(charSequence.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实现-AccessDeniedHandler-用户无权限处理器"><a href="#实现-AccessDeniedHandler-用户无权限处理器" class="headerlink" title="实现 AccessDeniedHandler (用户无权限处理器)"></a>实现 AccessDeniedHandler (用户无权限处理器)</h3><p><strong><font color="red">用户无权限时处理类</font></strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Component</span></span><br><span class="line">public class MyAccessDeniedHandler implements AccessDeniedHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//返回json形式的错误信息       </span></span><br><span class="line">        <span class="selector-tag">response</span><span class="selector-class">.setCharacterEncoding</span>(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="selector-tag">response</span><span class="selector-class">.setContentType</span>(<span class="string">"application/json"</span>);</span><br><span class="line">        <span class="selector-tag">response</span><span class="selector-class">.getWriter</span>()<span class="selector-class">.println</span>(<span class="string">"&#123;\"</span>code\<span class="string">":403,\"</span>message\<span class="string">":\"</span>你没有权限访问！\<span class="string">",\"</span>data\<span class="string">":\"</span>\<span class="string">"&#125;"</span>);</span><br><span class="line">        <span class="selector-tag">response</span><span class="selector-class">.getWriter</span>()<span class="selector-class">.flush</span>();</span><br><span class="line">        <span class="comment">/*//无权限时跳转</span></span><br><span class="line"><span class="comment">        response.sendRedirect("/home");</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="selector-tag">request</span><span class="selector-class">.getSession</span>()<span class="selector-class">.invalidate</span>();  <span class="comment">//会话结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="继承-AbstractSecurityInterceptor（资源管理拦截器）"><a href="#继承-AbstractSecurityInterceptor（资源管理拦截器）" class="headerlink" title="继承 AbstractSecurityInterceptor（资源管理拦截器）"></a>继承 AbstractSecurityInterceptor（资源管理拦截器）</h3><p><strong><font color="red">spring security 版本在 5.0 后要添加 PasswordEncoder 验证</font></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilterSecurityInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractSecurityInterceptor</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取被拦截url所需的权限</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FilterInvocationSecurityMetadataSource securityMetadataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取权限管理器</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyAccessDecisionManager</span><span class="params">(MyAccessDecisionManager myAccessDecisionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setAccessDecisionManager(myAccessDecisionManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FilterInvocation fi = <span class="keyword">new</span> FilterInvocation(request, response, chain);</span><br><span class="line">        invoke(fi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(FilterInvocation fi)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//fi里面有一个被拦截的url</span></span><br><span class="line">        <span class="comment">//里面调用MyInvocationSecurityMetadataSource的getAttributes(Object object)这个方法获取fi对应的所有权限</span></span><br><span class="line">        <span class="comment">//再调用MyAccessDecisionManager的decide方法来校验用户的权限是否足够</span></span><br><span class="line">        InterceptorStatusToken token = <span class="keyword">super</span>.beforeInvocation(fi);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//执行下一个拦截器</span></span><br><span class="line">            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.afterInvocation(token, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getSecureObjectClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> FilterInvocation.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityMetadataSource <span class="title">obtainSecurityMetadataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.securityMetadataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实现-FilterInvocationSecurityMetadataSource-读取url资源"><a href="#实现-FilterInvocationSecurityMetadataSource-读取url资源" class="headerlink" title="实现 FilterInvocationSecurityMetadataSource (读取url资源)"></a>实现 FilterInvocationSecurityMetadataSource (读取url资源)</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> class MySecurityMetadataSource implements</span><br><span class="line">        FilterInvocationSecurityMetadataSource &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> UserMapper usersMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 资源权限集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, Collection&lt;ConfigAttribute&gt;&gt; <span class="built_in">map</span> =<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取权限表中所有权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> loadResourceDefine()&#123;</span><br><span class="line">        <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">        Collection&lt;ConfigAttribute&gt; array;</span><br><span class="line">        ConfigAttribute cfg;</span><br><span class="line">        List&lt;Permission&gt; permissions = usersMapper.findAllPermission();</span><br><span class="line">        <span class="keyword">for</span>(Permission permission : permissions) &#123;</span><br><span class="line">            array = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            cfg = <span class="keyword">new</span> SecurityConfig(permission.getName());</span><br><span class="line">            <span class="comment">//此处只添加了用户的名字，其实还可以添加更多权限的信息，例如请求方法到ConfigAttribute的集合中去。此处添加的信息将会作为MyAccessDecisionManager类的decide的第三个参数。</span></span><br><span class="line">            array.<span class="built_in">add</span>(cfg);</span><br><span class="line">            <span class="comment">//用权限的getUrl() 作为map的key，用ConfigAttribute的集合作为 value，</span></span><br><span class="line">            <span class="built_in">map</span>.put(permission.getUrl(), array);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此方法是为了判定用户请求的url 是否在权限表中，如果在权限表中，则返回给 decide 方法，用来判定用户是否有此权限。如果不在权限表中则放行。</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; getAttributes(<span class="keyword">Object</span> object) <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span> ==<span class="keyword">null</span>) loadResourceDefine();</span><br><span class="line">        <span class="comment">//object 中包含用户请求的 url 信息</span></span><br><span class="line">        <span class="keyword">String</span> url = ((FilterInvocation) object).getRequestUrl();</span><br><span class="line">        <span class="keyword">String</span> resUrl;</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;<span class="keyword">String</span>&gt; iter = <span class="built_in">map</span>.keySet().iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            resUrl = iter.next();</span><br><span class="line">            <span class="keyword">if</span>(resUrl .matches(url)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">map</span>.<span class="built_in">get</span>(resUrl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; getAllConfigAttributes() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> supports(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-AccessDecisionManager-授权管理器"><a href="#实现-AccessDecisionManager-授权管理器" class="headerlink" title="实现 AccessDecisionManager (授权管理器)"></a>实现 AccessDecisionManager (授权管理器)</h3><p><strong><font color="red">判断用户请求的资源是否能通过</font></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">// decide 方法是判定是否拥有权限的决策方法，</span></span><br><span class="line">    <span class="comment">//authentication 是CustomUserService中循环添加到 GrantedAuthority 对象中的权限信息集合.</span></span><br><span class="line">    <span class="comment">//object 包含客户端发起的请求的requset信息，可转换为 HttpServletRequest request = ((FilterInvocation) object).getHttpRequest();</span></span><br><span class="line">    <span class="comment">//configAttributes 为MyInvocationSecurityMetadataSource的getAttributes(Object object)这个方法返回的结果，此方法是为了判定用户请求的url 是否在权限表中，如果在权限表中，则返回给 decide 方法，用来判定用户是否有此权限。如果不在权限表中则放行。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>== configAttributes || configAttributes.size() &lt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ConfigAttribute c;</span><br><span class="line">        String needRole;</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;ConfigAttribute&gt; iter = configAttributes.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            c = iter.next();</span><br><span class="line">            needRole = c.getAttribute();</span><br><span class="line">            <span class="comment">//authentication 为 CustomUserDetailService 中循环添加到 GrantedAuthority 对象中的权限信息集合</span></span><br><span class="line">            <span class="keyword">for</span>(GrantedAuthority ga : authentication.getAuthorities()) &#123;</span><br><span class="line">                <span class="keyword">if</span>(needRole.trim().equals(ga.getAuthority())) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">"no right"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute attribute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://xeh1430.github.io/img/securityHome.png" alt="首页"><br><img src="https://xeh1430.github.io/img/securityLogin.png" alt="登录页面"><br><img src="https://xeh1430.github.io/img/securityAdminHello.png" alt="管理员权限的 hello 页面"><br><img src="https://xeh1430.github.io/img/securityUserHello.png" alt="普通用户权限的 hello 页面"><br><img src="https://xeh1430.github.io/img/securityNoPermission.png" alt="无权限用户登录后页面"></p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a><font color="red">踩坑</font></h2><h3 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h3><p><strong>WebSecurityConfig 配置文件认证规则方法”configure(AuthenticationManagerBuilder auth)” 报错</strong><br><strong><code>java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id &quot;null&quot;</code></strong></p><p><strong><font color="red">原因: spring security 版本在5.0后，之前版本中的 NoOpPasswordEncoder 被 DelegatingPasswordEncoder 取代了，而你保存在数据库中的密码没有指定加密方式,就要加个 PasswordEncoder 验证</font></strong><br><img src="https://xeh1430.github.io/img/securitykeng1.png" alt=""></p><h3 id="认证管理器异常抛出"><a href="#认证管理器异常抛出" class="headerlink" title="认证管理器异常抛出"></a>认证管理器异常抛出</h3><p><strong>CustomUserDetailService 类 loadUserByUsername 默认抛出 UsernameNotFoundException，用 DisabledException 替换 UsernameNotFoundException</strong><br><img src="https://xeh1430.github.io/img/securitykeng2.png" alt=""><br><strong><font color="red">这里我们不抛出 UsernameNotFoundException 因为 Security 会把我们抛出的该异常捕捉并换掉，导致抛出的异常无法被 ControllerAdvice 捕捉到，无法进行统一异常处理；所以我们只需要打印正确的异常消息即可，Security 自动把异常添加到 HttpServletRequest 或 HttpSession 中</font></strong></p><h3 id="权限管理设置"><a href="#权限管理设置" class="headerlink" title="权限管理设置"></a>权限管理设置</h3><p><strong>1.使用权限表设置，如上</strong><br><strong>即<a href="#SpringSecurity-权限管理流程图">权限管理流程图</a>所示，通过实现 MyFilterSecurityInterceptor(资源管理拦截器)、MyAccessDecisionManager(授权管理器)和MySecurityMetadataSource(拦截器)进行权限拦截。</strong>  </p><p><strong>2.不通过权限表设置<br>2.1 使用注解方式在 controller 和 WebSecurityConfig 上进行设置</strong><br><img src="https://xeh1430.github.io/img/PreAuthorize.png" alt=""><br><strong>2.2 直接在 WebSecurityConfig 中 configure(HttpSecurity http) 方法进行设置</strong><br><img src="https://xeh1430.github.io/img/securityAccess.png" alt=""></p><p><strong><font color="red">PS:hasRole() 方法默认含有 ‘ROLE_’ 前缀，书写方式：‘ROLE_ADMIN’ –&gt; hasRole(‘ADMIN’) </font></strong></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><strong>项目 github 源码：<a href="https://github.com/xeh1430/xehProject/tree/master/security" target="_blank" rel="noopener">https://github.com/xeh1430/xehProject/tree/master/security</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring Boot 使用 Spring Security (一)</title>
      <link href="/text/springSecurity1.html"/>
      <url>/text/springSecurity1.html</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Security-介绍"><a href="#Spring-Security-介绍" class="headerlink" title="Spring Security 介绍"></a>Spring Security 介绍</h2><blockquote><p><strong><a href="https://baike.baidu.com/item/spring%20security" target="_blank" rel="noopener">Spring Security</a> 是一个功能强大且可高度自定义的身份验证和访问控制框架。它是保护基于 Spring 的应用程序的事实上的标准。<br>Spring Security 是一个专注于为 Java 应用程序提供身份验证和授权的框架。与所有 Spring 项目一样，Spring Security 的真正强大之处在于它可以轻松扩展以满足自定义要求。</strong></p></blockquote><h2 id="Spring-Security-特点"><a href="#Spring-Security-特点" class="headerlink" title="Spring Security 特点"></a>Spring Security 特点</h2><blockquote><p><strong>1.对身份验证和授权的全面和可扩展的支持<br>2.防止会话固定，点击劫持，跨站点请求伪造等攻击<br>3.Servlet API 集成<br>4.可选与 Spring Web MVC 集成</strong></p></blockquote><h2 id="在-Spring-Boot-项目中添加-Spring-Security"><a href="#在-Spring-Boot-项目中添加-Spring-Security" class="headerlink" title="在 Spring Boot 项目中添加 Spring Security"></a>在 Spring Boot 项目中添加 Spring Security</h2><p><strong>创建 Spring Boot 已经在之前的博客中提到了，详情请查看<a href="https://xeh1430.github.io/2018/12/17/Spring-Boot-Create" target="_blank" rel="noopener"> Spring Boot 入门</a></strong></p><font color="red" size="4"><strong>功能：创建静态页面，通过 Spring Security 权限管理，熟悉 Spring Security 的功能及配置</strong></font><h3 id="引入-maven-依赖"><a href="#引入-maven-依赖" class="headerlink" title="引入 maven 依赖"></a>引入 maven 依赖</h3><p>Spring Security 依赖如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>pom.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="创建静态页面"><a href="#创建静态页面" class="headerlink" title="创建静态页面"></a>创建静态页面</h3><p><strong>创建三个静态页面：主页、hello 页面和登录页面</strong><br><strong><font color="red">注意：静态文件不要 WEB-INF 下，应用服务器把 WEB-INF 指为禁访目录，即直接在浏览器里是不能访问到的</font></strong><br><code>src/main/resources/templates/home.html</code></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击 <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">hello</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>这里<span class="tag">&lt;/<span class="name">a</span>&gt;</span>进入 hello 页面.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>主页中，在 Thymeleaf 模板定义跳转到 hello 页面</strong><br><code>src/main/resources/templates/hello.html</code> </p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span></span><br><span class="line"><span class="xml">      xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:inline</span>=<span class="string">"text"</span>&gt;</span>Hello [[$</span><span class="template-tag">&#123;#<span class="name">httpServletRequest.remoteUser</span>&#125;</span><span class="xml">]]!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">logout</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Sign Out"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>登录页面</strong><br><code>src/main/resources/templates/login.html</code>   </p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span></span><br><span class="line"><span class="xml">      xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security Example <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;param.error&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            Invalid username and password.</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;param.logout&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            You have been logged out.</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">login</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> User Name : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Sign In"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="配置-Spring-MVC-的配置类"><a href="#配置-Spring-MVC-的配置类" class="headerlink" title="配置 Spring MVC 的配置类"></a>配置 Spring MVC 的配置类</h3><p><strong>Web应用程序基于 Spring MVC,配置 Spring MVC 并设置视图控制器访问页面</strong>  </p><p><code>src/main/java/hello/MvcConfig.java</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置预先配置了响应状态代码的简单自动控制器和/或视图以呈现响应主体。</span></span><br><span class="line"><span class="comment">     * 覆盖 WebMvcConfigurer 中的 addViewControllers 同名方法</span></span><br><span class="line"><span class="comment">     * 添加了四个视图控制器，前两个引用名称为 “home”（在其中定义 home.html）的视图，</span></span><br><span class="line"><span class="comment">     * 另一个引用名为 “hello”（在其中定义 hello.html）的视图，</span></span><br><span class="line"><span class="comment">     * 最后一个引用另一个名为 “login” 的视图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/home"</span>).setViewName(<span class="string">"home"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"home"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/hello"</span>).setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/login"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置Spring-Security"><a href="#设置Spring-Security" class="headerlink" title="设置Spring Security"></a>设置Spring Security</h3><p><code>src/main/java/hello/WebSecurityConfig.java</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.<span class="type">Bean</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.<span class="type">Configuration</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.<span class="type">HttpSecurity</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.<span class="type">EnableWebSecurity</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.<span class="type">WebSecurityConfigurerAdapter</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.<span class="type">User</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.<span class="type">UserDetails</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.<span class="type">UserDetailsService</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.<span class="type">InMemoryUserDetailsManager</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法定义 url 的访问权限，登录路径，注销</span></span><br><span class="line"><span class="comment">     * @param http</span></span><br><span class="line"><span class="comment">     * @throws Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void configure(<span class="type">HttpSecurity</span> http) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">        http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>, <span class="string">"/home"</span>).permitAll()  <span class="comment">//任何人(包括没有经过验证的)都可以访问 "/" 和 "/home"</span></span><br><span class="line">                <span class="comment">// .antMatchers("/admin/**").hasRole("ADMIN")  // "/admin/" 开头的 URL 必须要是管理员用户，譬如 ”admin” 用户</span></span><br><span class="line">                .anyRequest().authenticated()  <span class="comment">//所有其他的 URL 都需要用户进行验证</span></span><br><span class="line">                .and()</span><br><span class="line">            .formLogin()   <span class="comment">//使用 Java 配置默认值设置了基于表单的验证。使用 POST 提交到"/login"时，需要用 "username" 和 "password" 进行验证</span></span><br><span class="line">                .loginPage(<span class="string">"/login"</span>)   <span class="comment">//指定在需要登录时将用户发送到的URL</span></span><br><span class="line">                .permitAll()   <span class="comment">//用户可以访问 formLogin() 相关的任何URL</span></span><br><span class="line">                .and()</span><br><span class="line">            .logout()    <span class="comment">//注销</span></span><br><span class="line">                .permitAll();   <span class="comment">//用户可以访问 logout() 相关的任何URL。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置创建一个 Servlet 过滤器，称为 springSecurityFilterChain 负责应用程序内的所有安全性</span></span><br><span class="line"><span class="comment"> * （保护应用程序 URL，验证提交的用户名和密码，重定向到登录表单等）</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">UserDetailsService</span> userDetailsService() &#123;</span><br><span class="line">        <span class="type">UserDetails</span> user =</span><br><span class="line">             <span class="type">User</span>.withDefaultPasswordEncoder()</span><br><span class="line">                .username(<span class="string">"user"</span>)</span><br><span class="line">                .password(<span class="string">"password"</span>)</span><br><span class="line">                .roles(<span class="string">"USER"</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">InMemoryUserDetailsManager</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Spring Security 还有许多设置，想了解可以查看<a href="https://github.com/xeh1430/xeh1430.github.io/blob/master/document/securityMore.md" target="_blank" rel="noopener"> WebSecurityConfig 更多常用设置</a>；<br>如需了解全部请查看<a href="https://docs.spring.io/spring-security/site/docs/5.2.0.BUILD-SNAPSHOT/reference/htmlsingle" target="_blank" rel="noopener">官方文档</a></strong></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>通过项目 main() 方法主入口启动项目,应用程序启动后，将浏览器指向 <code>http://localhost:8080</code>。<br>你应该看到主页：<br><img src="https://xeh1430.github.io/img/security-1.png" alt=""></p><p>点击超链接,访问 hello 页面，因为刚才使用 Security 设置了权限，所以访问不到，直接跳转到登录页面<br><img src="https://xeh1430.github.io/img/security-2.png" alt=""></p><p>输入错误的用户名密码，请重新输入登录<br><img src="https://xeh1430.github.io/img/security-3.png" alt=""></p><p>登录成功，点击 Sign Out 按钮可注销登录<br><img src="https://xeh1430.github.io/img/security-4.png" alt=""></p><p>成功注销，回到登录页面<br><img src="https://xeh1430.github.io/img/security-5.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://spring.io/guides/gs/securing-web" target="_blank" rel="noopener">Spring 官方案例</a></p>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring Boot 入门</title>
      <link href="/text/springBoot.html"/>
      <url>/text/springBoot.html</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Boot-介绍"><a href="#Spring-Boot-介绍" class="headerlink" title="Spring Boot 介绍"></a>Spring Boot 介绍</h2><blockquote><p><strong><a href="https://baike.baidu.com/item/Spring%20Boot" target="_blank" rel="noopener">Spring Boot</a> 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</strong></p></blockquote><h2 id="Spring-Boot-特点"><a href="#Spring-Boot-特点" class="headerlink" title="Spring Boot 特点"></a>Spring Boot 特点</h2><p><strong>简单、快速、方便</strong></p><blockquote><p><strong>1.创建独立的 Spring 应用程序<br>2.直接嵌入 Tomcat，Jetty 或 Undertow（无需部署 WAR 文件）<br>3.提供固定的 “引用” 依赖项以简化构建配置<br>4.尽可能自动配置 Spring 和第三方库<br>5.提供生产就绪功能，例如指标，运行状况检查和外部化配置<br>6.绝对没有代码生成，也不需要 XML 配置</strong></p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p><strong>创建 Spring Boot 有两个方式，通过访问 <a href="http://start.spring.io" target="_blank" rel="noopener">http://start.spring.io</a> 获取 Spring Boot 基础项目，<br>通过IDE创建 Spring Boot 项目。</strong></p><h3 id="通过-http-start-spring-io-下载-Spring-Boot-基础项目"><a href="#通过-http-start-spring-io-下载-Spring-Boot-基础项目" class="headerlink" title="通过 http://start.spring.io 下载 Spring Boot 基础项目"></a>通过 <a href="http://start.spring.io" target="_blank" rel="noopener">http://start.spring.io</a> 下载 Spring Boot 基础项目</h3><p>1.访问 <a href="http://start.spring.io" target="_blank" rel="noopener">http://start.spring.io</a><br>2.选择配置相关参数，如下图<br><img src="https://xeh1430.github.io/img/springboot_1.png" alt=""><br>3.将下载的项目压缩包解压，导入IDE即可</p><h3 id="通过-IDE-创建-Spring-Boot-项目-以-idea-为例"><a href="#通过-IDE-创建-Spring-Boot-项目-以-idea-为例" class="headerlink" title="通过 IDE 创建 Spring Boot 项目(以 idea 为例)"></a>通过 IDE 创建 Spring Boot 项目(以 idea 为例)</h3><p>打开idea，File -&gt; New -&gt; Project -&gt; 选择 Spring Initializr -&gt; Next -&gt; 设置包名项目名构建工具 Next -&gt; 添加依赖 Next -&gt; Finish<br><img src="https://xeh1430.github.io/img/springboot_2.png" alt=""><br><img src="https://xeh1430.github.io/img/springboot_3.png" alt=""><br><img src="https://xeh1430.github.io/img/springboot_4.png" alt=""><br><img src="https://xeh1430.github.io/img/springboot_5.png" alt=""><br><img src="https://xeh1430.github.io/img/springboot_6.png" alt=""><br>打开项目，项目结构如下<br><img src="https://xeh1430.github.io/img/springboot_7.png" alt=""><br>如上图所示，Spring Boot 的基础结构共三个文件:</p><ul><li>src/main/java  程序开发以及主程序入口</li><li>src/main/resources 配置文件</li><li>src/test/java  测试程序</li></ul><p>至此，Spring Boot 项目创建成功。</p><h2 id="创建一个简单的-Web-应用程序"><a href="#创建一个简单的-Web-应用程序" class="headerlink" title="创建一个简单的 Web 应用程序"></a>创建一个简单的 Web 应用程序</h2><h3 id="在-pom-xml-文件中添加-web-依赖包"><a href="#在-pom-xml-文件中添加-web-依赖包" class="headerlink" title="在 pom.xml 文件中添加 web 依赖包"></a>在 pom.xml 文件中添加 web 依赖包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建-Web-控制器"><a href="#创建-Web-控制器" class="headerlink" title="创建 Web 控制器"></a>创建 Web 控制器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.demo</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RestController</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMapping</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">RestController</span></span><br><span class="line"><span class="keyword">public</span> class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">RequestMapping</span>("/")</span><br><span class="line">    public String index() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> "<span class="selector-tag">Greetings</span> <span class="selector-tag">from</span> <span class="selector-tag">Spring</span> <span class="selector-tag">Boot</span>!";</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@RestController 让 Spring MVC 可以使用它来处理Web请求<br>@RequestMapping(“/“) 映射/到 index() 方法。从浏览器调用或在命令行上使用curl时，该方法返回纯文本<br>@RestController=@Controller+@ResponseBody，两个注释会导致Web请求返回数据而不是视图</strong></p><h3 id="在-Application-类中调用-controller"><a href="#在-Application-类中调用-controller" class="headerlink" title="在 Application 类中调用 controller"></a>在 Application 类中调用 controller</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line">@<span class="type">SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">SpringApplication</span>.run(<span class="type">DemoApplication</span>.<span class="keyword">class</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="type">Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">CommandLineRunner</span> commandLineRunner(<span class="type">ApplicationContext</span> ctx) &#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"Let's inspect the beans provided by Spring Boot:"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span>[] beanNames = ctx.getBeanDefinitionNames();</span><br><span class="line">            <span class="type">Arrays</span>.<span class="built_in">sort</span>(beanNames);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">String</span> beanName : beanNames) &#123;</span><br><span class="line">                <span class="type">System</span>.out.<span class="built_in">println</span>(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SpringBootApplication 是一个便利注解，包含了以下所有内容：<br>    @Configuration 标记该类作为应用程序上下文的bean定义的源。<br>    @EnableAutoConfiguration 告诉 Spring Boot 开始根据类路径设置，其他 bean 和各种属性设置添加 bean。<br>    @ComponentScan告诉 Spring 在包中寻找其他组件，配置和服务 hello，允许它找到控制器。<br>main()方法使用 Spring Boot 的 SpringApplication.run() 方法来启动应用程序</p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p><strong>控制台输出由 Spring Boot 提供的引导包</strong><br><img src="https://xeh1430.github.io/img/springboot_8.png" alt=""><br><strong>访问<code>http://localhost:8080/</code>调用控制器</strong><br><strong>页面显示： <code>Greetings from Spring Boot!</code><br>访问成功！</strong></p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写一个简单的单元测试，通过端点模拟-servlet-请求和响应"><a href="#编写一个简单的单元测试，通过端点模拟-servlet-请求和响应" class="headerlink" title="编写一个简单的单元测试，通过端点模拟 servlet 请求和响应"></a>编写一个简单的单元测试，通过端点模拟 servlet 请求和响应</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.example</span><span class="selector-class">.demo</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.junit</span><span class="selector-class">.Test</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.junit</span><span class="selector-class">.runner</span><span class="selector-class">.RunWith</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.beans</span><span class="selector-class">.factory</span><span class="selector-class">.annotation</span><span class="selector-class">.Autowired</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.test</span><span class="selector-class">.context</span><span class="selector-class">.SpringBootTest</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.test</span><span class="selector-class">.context</span><span class="selector-class">.junit4</span><span class="selector-class">.SpringRunner</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">RunWith</span>(<span class="keyword">SpringRunner</span>.<span class="keyword">class</span>)</span><br><span class="line">@<span class="keyword">SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> class DemoApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Autowired</span></span><br><span class="line">    private HelloController helloController;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Test</span></span><br><span class="line">    public void getHello() throws Exception &#123;</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("\<span class="selector-tag">n</span>"+<span class="selector-tag">helloController</span><span class="selector-class">.index</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试类，控制台成功输出即可。</p><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><p><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot 官网</a><br><a href="https://spring.io/guides" target="_blank" rel="noopener">Spring Boot 官方入门案例</a></p>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Web Service 调用天气预报</title>
      <link href="/text/webService2.html"/>
      <url>/text/webService2.html</url>
      
        <content type="html"><![CDATA[<h3 id="webservice-资源"><a href="#webservice-资源" class="headerlink" title="webservice 资源"></a>webservice 资源</h3><blockquote><p><strong>免费 webservice 接口，包含天气预报、国内手机号码归属地查询WEB服务等多种服务</strong><br><a href="http://www.webxml.com.cn/zh_cn/web_services.aspx" target="_blank" rel="noopener">http://www.webxml.com.cn/zh_cn/web_services.aspx</a><br><strong>本次项目使用天气预报的接口</strong><br><a href="http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl" target="_blank" rel="noopener">http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl</a><br>创建 java 工程，将天气预报 wsdl 生成客户端代码，具体参考： <a href="https://xeh1430.github.io/2018/11/26/Web%20Service%20Client" target="_blank" rel="noopener">Web Service 入门</a></p></blockquote><h3 id="生成代码问题解决"><a href="#生成代码问题解决" class="headerlink" title="生成代码问题解决"></a>生成代码问题解决</h3><p>直接使用 wsdl 调用生成代码会报错，无法生成。</p><blockquote><p><strong>修改 wsdl 文件里面的一个内容<br>&lt;s:element ref=”s:schema”/&gt;<br>&lt;s:any/&gt;<br>替换为<br>&lt;s:any minOccurs=”2” maxOccurs=”2”/&gt;<br>注意要全部替换</strong></p></blockquote><h3 id="调用天气预报接口"><a href="#调用天气预报接口" class="headerlink" title="调用天气预报接口"></a>调用天气预报接口</h3><p>成功生成代码之后，参考接口文档，编写客户端调用</p><blockquote><p>天气预报接口列表<br><a href="http://ws.webxml.com.cn/WebServices/WeatherWS.asmx" target="_blank" rel="noopener">http://ws.webxml.com.cn/WebServices/WeatherWS.asmx</a></p></blockquote><p>客户端调用代码<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class TestWeather &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        WeatherWS ws = <span class="keyword">new</span> WeatherWS();</span><br><span class="line">        WeatherWSSoap soap = ws.getWeatherWSSoap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *   获得天气预报数据</span></span><br><span class="line"><span class="comment">         *   输入参数：城市/地区ID或名称</span></span><br><span class="line"><span class="comment">         *   返回数据：一维字符串数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ArrayOfString weather = soap.getWeather(<span class="string">"广州"</span>, <span class="keyword">null</span>);</span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; list = weather.getString();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"天气预报数据:\n"</span>+list);</span><br><span class="line">        System.out.<span class="built_in">println</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获得国外国家名称和与之对应的ID</span></span><br><span class="line"><span class="comment">         * 输入参数：无，</span></span><br><span class="line"><span class="comment">         * 返回数据：一维字符串数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ArrayOfString country = soap.getRegionCountry();</span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; list2 = country.getString();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"国家名称对应数据:\n"</span>+list2);</span><br><span class="line">        System.out.<span class="built_in">println</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获得中国省份、直辖市、地区和与之对应的ID</span></span><br><span class="line"><span class="comment">         * 输入参数：无</span></span><br><span class="line"><span class="comment">         * 返回数据：一维字符串数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ArrayOfString province = soap.getRegionProvince();</span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; list3 = province.getString();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"省份地区对应数据:\n"</span>+list3);</span><br><span class="line">        System.out.<span class="built_in">println</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获得支持的城市/地区名称和与之对应的ID</span></span><br><span class="line"><span class="comment">         * 输入参数：theRegionCode = 省市、国家ID或名称</span></span><br><span class="line"><span class="comment">         * 返回数据：一维字符串数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ArrayOfString cityString = soap.getSupportCityString(<span class="string">"广东"</span>);</span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; list4 = cityString.getString();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"支持的城市/地区名称对应数据:\n"</span>+list4);</span><br><span class="line">        System.out.<span class="built_in">println</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下图<br><img src="https://xeh1430.github.io/img/webservice-out.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Web Service </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Web Service 入门</title>
      <link href="/text/webService1.html"/>
      <url>/text/webService1.html</url>
      
        <content type="html"><![CDATA[<h2 id="Web-Service-简介"><a href="#Web-Service-简介" class="headerlink" title="Web Service 简介"></a>Web Service 简介</h2><p>Web Service 技术，能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件，就可相互交换数据或集成。依据 Web Service 规范实施的应用之间，无论它们所使用的语言、平台或内部协议是什么，都可以相互交换数据。<br>Web Service 是一种跨编程语言和跨操作系统平台的远程调用技术。</p><p>详细信息： <a href="https://baike.baidu.com/item/Web%20Service" target="_blank" rel="noopener">WebService百度百科</a></p><h2 id="WebService-的原理"><a href="#WebService-的原理" class="headerlink" title="WebService 的原理"></a>WebService 的原理</h2><p><strong>XML+XSD,SOAP 和 WSDL 就是构成 WebService 平台的三大技术</strong><br>SOAP 协议 = HTTP 协议 + XML 数据格式  </p><p><strong>WebService 开发可以分为服务器端开发和客户端开发两个方面</strong><br>对客户端而言，我们给这各类 WebService 客户端 API 传递 wsdl 文件的 url 地址，这些 API 就会创建出底层的代理类，我调用 这些代理，就可以访问到 webservice 服务。代理类把客户端的方法调用变成 soap 格式的请求数据再通过 HTTP 协议发出去，并把接收到的 soap 数据变成返回值返回。<br>对服务端而言，各类 WebService 框架的本质就是一个大大的 Servlet，当远程调用客户端给它通过 http 协议发送过来 soap 格式的请求数据时，它分析这个数据，就知道要调用哪个 java 类的哪个方法，于是去查找或创建这个对象，并调用其方法，再把方法返回的结果包装成 soap 格式的数据，通过http响应消息回给客户端。</p><h2 id="JAVA-WebService-规范"><a href="#JAVA-WebService-规范" class="headerlink" title="JAVA WebService 规范"></a>JAVA WebService 规范</h2><p>Java 中共有三种 WebService 规范，分别是 JAXM&amp;SAAJ、JAX-WS（JAX-RPC）、JAX-RS。</p><h2 id="Web-Service-服务端开发"><a href="#Web-Service-服务端开发" class="headerlink" title="Web Service 服务端开发"></a>Web Service 服务端开发</h2><p>创建一个 WebService 实例，实现服务端发布，客户端获取信息的功能。<br>使用 idea 创建 springboot 项目，配置 WebService 和 web 依赖<br><img src="https://xeh1430.github.io/img/webservice-2.jpg" alt=""><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.编写 WebService 接口方法</span><br><span class="line">public<span class="built_in"> interface </span>HelloWebService &#123;</span><br><span class="line">    String sayHello(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>实现接口，作为 webservice 提供服务类 </span><br><span class="line"><span class="meta">@WebService</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloWebServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloWebService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="built_in">String</span> sayHello(<span class="built_in">String</span> name) &#123;</span><br><span class="line">        <span class="built_in">String</span> said = name + <span class="string">",Hello~~"</span>;</span><br><span class="line">        System.out.println(said);</span><br><span class="line">        <span class="keyword">return</span> said;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>发布服务</span><br><span class="line">@SpringBootApplication</span><br><span class="line"><span class="keyword">public</span> class App &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        SpringApplication.<span class="built_in">run</span>(App.class, args);</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">        在服务器端运行 WebServicePublish 类中的 main 方法，控制台打印出发布 webservice 成功！</span></span><br><span class="line"><span class="comment">        在浏览器中输入我们在 WebServicePublish 类中定义的 url?wsdl (注意一定要加 wsdl ),浏览器显示一个 xml 文档</span></span><br><span class="line"><span class="comment">        那么我们这个 WebService 就发布成功了。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//定义 webService 的发布地址，提供给外界使用接口的地址</span></span><br><span class="line">        <span class="keyword">String</span> url = <span class="string">"http://localhost:8081/WebService"</span>;</span><br><span class="line">        Endpoint.publish(url,<span class="keyword">new</span> HelloWebServiceImpl());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"发布 webService 成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>.浏览器输入 `http://localhost:<span class="number">8081</span>/WebService?wsdl` 测试服务是否发布成功</span><br></pre></td></tr></table></figure><p><img src="https://xeh1430.github.io/img/webservice-wsdl.jpg" alt=""></p><h2 id="Web-Service-客户端实现"><a href="#Web-Service-客户端实现" class="headerlink" title="Web Service 客户端实现"></a>Web Service 客户端实现</h2><p>访问<code>http://localhost:8081/WebService?wsdl</code>，将文档下载保存为 wsdl 格式</p><h3 id="idea-解析-wsdl-文件反向生成代码"><a href="#idea-解析-wsdl-文件反向生成代码" class="headerlink" title="idea 解析 wsdl 文件反向生成代码"></a>idea 解析 wsdl 文件反向生成代码</h3><p><strong>用 idea 新建一个 java 项目，导入 wsdl 文件</strong><br><strong> wsdl 文件右键点击–&gt; WebServices –&gt; Generate Java Code From Wsdl –&gt;选择解析规范 JAX-WS(idea自带)</strong> </p><p><img src="https://xeh1430.github.io/img/webservice-3.jpg" alt=""></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">编写客户端</span><br><span class="line"><span class="keyword">public</span> class HelloClient &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">    <span class="comment">//创建服务视图，视图是从 wsdl 文件的 service 标签的 name 属性获取</span></span><br><span class="line">        HelloWebServiceImplService helloWebServiceImplService = <span class="keyword">new</span> HelloWebServiceImplService();</span><br><span class="line">        <span class="comment">//获取服务实现类，实现类从 wsdl 文件的 portType 的 name 属性获取</span></span><br><span class="line">        HelloWebServiceImpl helloWebService = helloWebServiceImplService.getPort(HelloWebServiceImpl.class);</span><br><span class="line">        <span class="comment">//获取查询方法，从 portType的operation 标签获取</span></span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">str</span> = helloWebService.sayHello(<span class="string">"小明"</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接执行，控制台成功输出</p>]]></content>
      
      
      <categories>
          
          <category> Web Service </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Axure 入门使用</title>
      <link href="/text/axure.html"/>
      <url>/text/axure.html</url>
      
        <content type="html"><![CDATA[<p>Axure RP 是一款专业的快速原型设计工具。<br>Axure RP 是美国 Axure Software Solution 公司旗舰产品，是一个专业的快速原型设计工具，让负责定义需求和规格、设计功能和界面的专家能够快速创建应用软件或 Web 网站的线框图、流程图、原型和规格说明文档。作为专业的原型设计工具，它能快速、高效的创建原型，同时支持多人协作设计和版本控制管理。  </p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Axure RP 是收费软件，只有30天免费试用，可以到下面官网下载。<br><a href="https://www.axure.com/download" target="_blank" rel="noopener">Axure官网下载：https://www.axure.com/download</a></p><p><strong>百度云资源下载</strong><br>链接：<a href="https://pan.baidu.com/s/1dLmf5aptMGjYQYiyozgpHg" target="_blank" rel="noopener">https://pan.baidu.com/s/1dLmf5aptMGjYQYiyozgpHg</a><br>提取码：t30y<br><img src="http://xeh1430.github.io/img/source.png" alt="资源列表"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>双击 AxureRP-setup.exe 进入安装提示页面，按 “下一步” 一直到完成安装。</p><p>打开软件，点击 “Enter License” 将 注册码.txt 中的激活码输入进去，<br>或者进入 帮助-&gt;管理授权 输入激活码。<br><img src="http://xeh1430.github.io/img/license.png" alt="进入管理授权功能"><br><img src="http://xeh1430.github.io/img/enterLicense.png" alt="管理授权"></p><h3 id="汉化-汉化包中附有步骤"><a href="#汉化-汉化包中附有步骤" class="headerlink" title="汉化(汉化包中附有步骤)"></a>汉化(汉化包中附有步骤)</h3><p>1.关闭 Axure RP 软件，将 汉化包.rar 文件解压, 得到 lang 文件夹。<br>2.将解压后的 lang 文件夹添加到软件的安装目录中。<br><img src="http://xeh1430.github.io/img/hanhua.png" alt="软件的安装目录"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>资源提供《Axure RP 8 实战手册》pdf，可以根据内容进行练习。</p><p><strong>在线资源</strong><br><a href="http://www.iaxure.com/menupage/book.html" target="_blank" rel="noopener">Axure 官方中文网</a><br><a href="https://www.axure.com.cn" target="_blank" rel="noopener">Axure RP 8 实战手册</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring Boot:Whitelabel Error Page 错误解决</title>
      <link href="/text/springBoot-Error.html"/>
      <url>/text/springBoot-Error.html</url>
      
        <content type="html"><![CDATA[<h4 id="使用-Spring-Boot-构建一个简单的工程，访问报错，页面显示-Whitelabel-Error-Page"><a href="#使用-Spring-Boot-构建一个简单的工程，访问报错，页面显示-Whitelabel-Error-Page" class="headerlink" title="使用 Spring Boot 构建一个简单的工程，访问报错，页面显示 Whitelabel Error Page"></a>使用 Spring Boot 构建一个简单的工程，访问报错，页面显示 Whitelabel Error Page</h4><p><img src="http://xeh1430.github.io/img/error.png" alt="访问报错图">  </p><h4 id="404，找了很久，路径没错，注解也没错，毫无头绪。最后只能求助于百度了，终于知道问题出在哪里了。"><a href="#404，找了很久，路径没错，注解也没错，毫无头绪。最后只能求助于百度了，终于知道问题出在哪里了。" class="headerlink" title="404，找了很久，路径没错，注解也没错，毫无头绪。最后只能求助于百度了，终于知道问题出在哪里了。"></a>404，找了很久，路径没错，注解也没错，毫无头绪。最后只能求助于百度了，终于知道问题出在哪里了。</h4><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a><font color="red">原因：</font></h2><h3 id="程序只加载启动类所在包及其子包下的内容。我不小心包启动类放在了-web-包下，导致-dao-其他包的代码加载不到。"><a href="#程序只加载启动类所在包及其子包下的内容。我不小心包启动类放在了-web-包下，导致-dao-其他包的代码加载不到。" class="headerlink" title="程序只加载启动类所在包及其子包下的内容。我不小心包启动类放在了 web 包下，导致 dao 其他包的代码加载不到。"></a>程序只加载启动类所在包及其子包下的内容。我不小心包启动类放在了 web 包下，导致 dao 其他包的代码加载不到。</h3><p><img src="http://xeh1430.github.io/img/path.png" alt="错误目录图"><br><img src="http://xeh1430.github.io/img/path_true.png" alt="正确目录图"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a><font color="red">解决方法：</font></h2><h3 id="1-在-Application-类中加上"><a href="#1-在-Application-类中加上" class="headerlink" title="1.在 Application 类中加上"></a><strong>1.在 Application 类中加上</strong></h3><h3 id="ComponentScan-basePackages-quot-com-example-quot"><a href="#ComponentScan-basePackages-quot-com-example-quot" class="headerlink" title="@ComponentScan(basePackages = {&quot;com.example&quot;})"></a><strong><code>@ComponentScan(basePackages = {&quot;com.example&quot;})</code></strong></h3><h3 id="多个之间用”-”分隔。"><a href="#多个之间用”-”分隔。" class="headerlink" title="多个之间用”,”分隔。"></a><strong>多个之间用”,”分隔。</strong></h3><h3 id="2-将启动类放在正确位置。"><a href="#2-将启动类放在正确位置。" class="headerlink" title="2.将启动类放在正确位置。"></a><strong>2.将启动类放在正确位置。</strong></h3>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Markdown 入门</title>
      <link href="/text/markdown.html"/>
      <url>/text/markdown.html</url>
      
        <content type="html"><![CDATA[<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>Markdown 的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。<br><a id="more"></a></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>以#表示，一个#最大，共六级</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题  </span><br><span class="line">## 二级标题  </span><br><span class="line">### 三级标题  </span><br><span class="line">#### 四级标题  </span><br><span class="line">##### 五级标题  </span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><br></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表用 - + * 任何一种都可以<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#### 无序列表  </span><br><span class="line">- 足球  </span><br><span class="line">+ 篮球  </span><br><span class="line">* 乒乓球</span><br><span class="line">#### 有序列表  </span><br><span class="line"><span class="number">1.</span> 足球  </span><br><span class="line"><span class="number">2.</span> 篮球  </span><br><span class="line"><span class="number">3.</span> 乒乓球</span><br></pre></td></tr></table></figure></p><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul><li>足球  </li></ul><ul><li>篮球  </li></ul><ul><li>乒乓球</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol><li>足球  </li><li>篮球  </li><li>乒乓球<br><br></li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>只需要在文本前加入 &gt; 这种尖括号（大于号）即可<br>引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; &amp;gt;   </span><br><span class="line">&gt;这是引用的内容</span><br><span class="line"><span class="meta">&gt;&gt;</span>这是引用的内容</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><blockquote><p>&gt;<br>这是引用的内容 </p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><p>图片为：<code>![]()</code><br>链接为：<code>[]()</code><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">https://mouapp.com.Mou_128.png</span>)  </span><br><span class="line">[<span class="string">百度</span>](<span class="link">www.baidu.com</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://xeh1430.github.io/img/sun.jpg" alt="图片"><br>链接：<a href="www.baidu.com">百度</a>  </p><h2 id="粗体、斜体与删除线"><a href="#粗体、斜体与删除线" class="headerlink" title="粗体、斜体与删除线"></a>粗体、斜体与删除线</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*<span class="strong">*粗体*</span>*  </span><br><span class="line"><span class="strong">*斜体*</span>  </span><br><span class="line">**<span class="strong">*加粗并倾斜*</span>** </span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>粗体<br><strong>粗体</strong><br><em>斜体</em><br><strong><em>加粗并倾斜</em></strong><br><del>删除线</del></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">| Tables        |</span> Are           <span class="params">| Cool  |</span>  </span><br><span class="line"><span class="params">| ------------- |</span><span class="symbol">:-------------</span><span class="symbol">:|</span> -----<span class="symbol">:|</span>  </span><br><span class="line"><span class="params">| col 3 is      |</span> right-aligned <span class="params">| $1600 |</span>  </span><br><span class="line"><span class="params">| col 2 is      |</span> centered      <span class="params">|   $12 |</span>  </span><br><span class="line"><span class="params">| zebra stripes |</span> are neat      <span class="params">|    $1 |</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h2><blockquote><p>两个 ` 把代码包含(单行代码)<br>三个 ` 报代码包含(多行代码)</p></blockquote><p><code>System.out.println(&quot;Hello MarkDown!&quot;)</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System<span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">"Hello MarkDown!"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="字体、字号与颜色"><a href="#字体、字号与颜色" class="headerlink" title="字体、字号与颜色"></a>字体、字号与颜色</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;font <span class="attribute">face</span>=<span class="string">"黑体"</span>&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&lt;font <span class="attribute">face</span>=<span class="string">"微软雅黑"</span>&gt;我是微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font <span class="attribute">face</span>=<span class="string">"STCAIYUN"</span>&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&lt;font <span class="attribute">color</span>=#0099ff <span class="attribute">size</span>=5 <span class="attribute">face</span>=<span class="string">"黑体"</span>&gt;color=#0099ff <span class="attribute">size</span>=72 <span class="attribute">face</span>=<span class="string">"黑体"</span>&lt;/font&gt;</span><br><span class="line">Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3。</span><br><span class="line">&lt;font <span class="attribute">color</span>=#00ffff <span class="attribute">size</span>=72&gt;color=#00ffff&lt;/font&gt;</span><br><span class="line">&lt;font <span class="attribute">color</span>=gray <span class="attribute">size</span>=72&gt;color=gray&lt;/font&gt;</span><br></pre></td></tr></table></figure><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="5" face="黑体">color=#0099ff size=5 face=”黑体”</font><br><font color="#00ffff" size="7">color=#00ffff</font><br><font color="gray" size="6">color=gray</font>  <h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><p><code>&lt;center&gt;居中显示&lt;center&gt;</code>   </p><p><center>居中显示<center>  </center></center></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分割线的语法只需要三个 * 号<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span><span class="meta">---</span></span><br><span class="line"><span class="string">***</span> </span><br><span class="line"><span class="string">****</span></span><br></pre></td></tr></table></figure></p><hr><hr><hr><hr><p>参考：<br>[1]: <a href="https://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="noopener">https://www.jianshu.com/p/1e402922ee32/</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hexo 入门</title>
      <link href="/text/hello-world.html"/>
      <url>/text/hello-world.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn" target="_blank" rel="noopener">Hexo官网</a><br><a href="https://hexo.io/zh-cn/docs" target="_blank" rel="noopener">Hexo文档</a><br><a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">Hexo GitHub</a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo n <span class="string">"My New Post"</span> (简写)</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s (简写)</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g (简写)</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d (简写)</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
